/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v2/account_balances/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Account balances
         * @description Return account balances.
         */
        post: operations["GetAccountBalances"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/account_balances/{currency}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Account balance for currency
         * @description Return account balances for currency.
         */
        post: operations["GetAccountBalancesForCurrency"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/btc_unconfirmed/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unconfirmed bitcoin deposits
         * @description This API call is cached for 60 seconds. This call will be executed on the account (Sub or Main), to which
         *     the used API key is bound to.
         *
         */
        post: operations["GetUnconfirmedBTCDeposits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/buy/instant/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Buy instant order
         * @description Open a buy instant order. By placing an instant order you acknowledge that the execution of your order
         *     depends on the market conditions and that these conditions may be subject to sudden changes that cannot be
         *     foreseen. This call will be executed on the account (Sub or Main), to which the used API key is bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing amount and/or price POST parameters | Missing one or both parameters. |
         *     | 'parameter': Enter a number. Use "." as a decimal point. | 'parameter' can only be number. |
         *     | Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |
         *     | You can only buy 'amount' 'currency'. Check your account balance for details. | Account has less 'available_currency' than is required to make this order. |
         *     | Maximum market buy amount at the moment is 'amount' 'currency'. Please use limit order instead. | Order amount exceeds the limit amount set for market buy orders. |
         *     | Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |
         *     </details>
         *
         */
        post: operations["OpenInstantBuyOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/buy/market/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Buy market order
         * @description Open a buy market order. By placing a market order you acknowledge that the execution of your order depends
         *     on the market conditions and that these conditions may be subject to sudden changes that cannot be
         *     foreseen. This call will be executed on the account (Sub or Main), to which the used API key is bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing amount and/or price POST parameters | Missing one or both parameters. |
         *     | 'parameter': Enter a number. Use "." as a decimal point. | 'parameter' can only be number. |
         *     | Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |
         *     | You can only buy 'amount' 'currency'. Check your account balance for details. | Account has less 'available_currency' than is required to make this order. |
         *     | Maximum market buy amount at the moment is 'amount' 'currency'. Please use limit order instead. | Order amount exceeds the limit amount set for market buy orders. |
         *     | Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |
         *     </details>
         *
         */
        post: operations["OpenMarketBuyOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/buy/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Buy limit order
         * @description Open a buy limit order. This call will be executed on the account (Sub or Main), to which the used API key
         *     is bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing amount and/or price POST parameters | Missing one or both parameters. |
         *     | 'parameter': Enter a number. Use "." as a decimal point. | 'parameter' can only be number. |
         *     | Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |
         *     | Price is more than 20% above market price. | Order price must not exceed 20% of current price. |
         *     | You need 'order_value' USD to open that order. You have only 'available_fiat' USD available. Check your account balance for details. | Account has less 'available_fiat' than is required to make this order. |
         *     | Sell if executed price must be higher than buy price. | 'limit_price' must be larger than 'price' parameter. |
         *     | Both limit_price and daily_order cannot be set. | Only one of those parameters can be set. |
         *     | Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |
         *     </details>
         *
         */
        post: operations["OpenLimitBuyOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/cancel_all_orders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel all orders
         * @description Cancel all open orders. This call will be executed on the account (Sub or Main), to which the used API key is bound to.
         */
        post: operations["CancelAllOrders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/cancel_all_orders/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel all orders for market
         * @description Cancel all open orders for a market. This call will be executed on the account (Sub or Main), to which the used API key is bound to.
         */
        post: operations["CancelOrdersForMarket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/cancel_order/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel order
         * @description Cancel an order. This call will be executed on the account (Sub or Main), to which the used API key is
         *     bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing id POST param. | Id parameter missing. |
         *     | Invalid id POST param. | Id parameter must be a positive integer. |
         *     | Invalid client_cancel_id POST param. | client_cancel_id parameter can contain at most 180 characters. |
         *     | Order not found | Order with that id was not found in orderbook. Order might already be filled or canceled. Please check order status. |
         *     | Order cancellation failed due to internal error. Please try again. | Please retry cancelling order. |
         *     | Order cancelattion failed due to trade halt. | You can cancel order after trade halt is lifted. |
         *     </details>
         *
         */
        post: operations["CancelOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/crypto-transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crypto transactions
         * @description Return user's crypto transactions. This call will be executed on the account, to which the used API key is
         *     bound to. This call is for your main account only.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Limit too large | Max value of limit parameter is 1000. |
         *     | Invalid limit | Limit parameter should be number from 1 to 1000. |
         *     | Offset too large | Offset parameter cannot be larger than 200000. |
         *     | Invalid offset | Offset parameter needs to be a number from 0 to 200000. |
         *     </details>
         *
         */
        post: operations["GetCryptoUserTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/currencies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Currencies
         * @description Returns list of all currencies with basic data.
         */
        get: operations["GetCurrencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/earn/subscribe/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Subscribe to earn
         * @description Subscribe given amount to lending / staking.
         *
         *     **The below table defines the HTTP Status codes that this API may return**
         *
         *     | Response Code | Status Code | Reason                                                                              |
         *     |---------------|-------------|-------------------------------------------------------------------------------------|
         *     | 200           |             | Successfully subscribed to earn.                                                    |
         *     | 400           | API5001     | Earn request amount too low.                                                        |
         *     | 400           | API5002     | Earn request amount too high.                                                       |
         *     | 400           | API5003     | Decimal places in amount exceed maximum allowed.                                    |
         *     | 400           | API5004     | Operation is unsupported.                                                           |
         *     | 400           | API5005     | Operation is currently unavailable, please try again later.                         |
         *     | 400           | API5006     | Required personal information is missing, please reach out to support@bitstamp.net. |
         *     | 400           | API5007     | Operation is unavailable, please reach out to support@bitstamp.net.                 |
         *     | 400           | API5011     | Something went wrong, try again later.                                              |
         *     | 403           |             | This feature is not available for your account.                                     |
         *
         */
        post: operations["EarnSubscribe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/earn/subscriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get earn subscriptions
         * @description Get earn subscriptions for user.
         *
         *     **The below table defines the HTTP Status codes that this API may return**
         *
         *     | Response Code | Status Code | Reason                                                      |
         *     |---------------|-------------|-------------------------------------------------------------|
         *     | 200           |             | Returned earn subscriptions                                 |
         *     | 400           | API5011     | Something went wrong, try again later.                      |
         *
         */
        get: operations["EarnSubscriptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/earn/subscriptions/setting/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Manage subscription settings
         * @description Manage subscription settings (opt in, opt out). Currently only supported for staking.
         *
         *     **The below table defines the HTTP Status codes that this API may return**
         *
         *     | Response Code | Status Code | Reason                                                      |
         *     |---------------|-------------|-------------------------------------------------------------|
         *     | 200           |             | Successfully update subscription setting.                   |
         *     | 400           | API5004     | Operation is unsupported.                                   |
         *     | 400           | API5005     | Operation is currently unavailable, please try again later. |
         *     | 400           | API5008     | Already opted in.                                           |
         *     | 400           | API5009     | Not opted in.                                               |
         *     | 400           | API5010     | Insufficient balance.                                       |
         *     | 400           | API5011     | Something went wrong, try again later.                      |
         *     | 403           |             | This feature is not available for your account.             |
         *
         */
        post: operations["EarnSubscriptionsSetting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/earn/transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get earn transactions
         * @description Get earn transaction history.
         *
         *     **The below table defines the HTTP Status codes that this API may return**
         *
         *     | Response Code | Status Code | Reason                                                      |
         *     |---------------|-------------|-------------------------------------------------------------|
         *     | 200           |             | Returned earn transaction history.                          |
         *     | 400           | API5011     | Something went wrong, try again later.                      |
         *
         */
        get: operations["EarnTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/earn/unsubscribe/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unsubscribe from earn
         * @description Unsubscribe given amount from lending / staking.
         *
         *     **The below table defines the HTTP Status codes that this API may return**
         *
         *     | Response Code | Status Code | Reason                                                      |
         *     |---------------|-------------|-------------------------------------------------------------|
         *     | 200           |             | Successfully unsubscribed from earn.                        |
         *     | 400           | API5001     | Earn request amount too low.                                |
         *     | 400           | API5002     | Earn request amount too high.                               |
         *     | 400           | API5003     | Decimal places in amount exceed maximum allowed.            |
         *     | 400           | API5004     | Operation is unsupported.                                   |
         *     | 400           | API5005     | Operation is currently unavailable, please try again later. |
         *     | 400           | API5011     | Something went wrong, try again later.                      |
         *     | 400           | API5012     | Staked balance is insufficient.                             |
         *     | 403           |             | This feature is not available for your account.             |
         *
         */
        post: operations["EarnUnsubscribe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/eur_usd/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * EUR/USD conversion rate
         * @description Return EUR/USD conversion rate.
         */
        get: operations["GetEURUSDConversionRate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fees/trading/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trading fees
         * @description Return all trading fees.
         */
        post: operations["GetAllTradingFees"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fees/trading/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trading fee for market
         * @description Return trading fees for market.
         */
        post: operations["GetTradingFeesForCurrency"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fees/withdrawal/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdrawal fees
         * @description Return withdrawal fees.
         */
        post: operations["GetAllWithdrawalFees"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fees/withdrawal/{currency}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdrawal fee for currency
         * @description Return withdrawal fee for currency.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Invalid network selection | The selected network is not supported for 'currency'. Please select a compatible network for it. |
         *     </details>
         *
         */
        post: operations["GetWithdrawalFeeForCurrency"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/instant_convert_address/info/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Instant convert address
         * @description Shows transactions for the instant convert address.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Address not found. | Provided address is wrong. |
         *     </details>
         *
         */
        post: operations["GetLiquidationAddressTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/instant_convert_address/new/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * New instant convert address
         * @description Creates a new instant convert address which will automatically sell your crypto for specified fiat currency.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing liquidation_currency parameter. | Parameter liquidation_currency is required for this call. |
         *     | Invalid currency / Currency [...] not supported. | Invalid liquidation_currency. |
         *     | Cannot create new address, please try later. | At the moment we can't create new deposit address. Try again later. |
         *     | Invalid address format. | Invalid address_format. |
         *     | Your trading features are currently disabled | No new liquidation addresses can be created at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |
         *     </details>
         *
         */
        post: operations["RequestNewLiquidationAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/markets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Markets
         * @description View that returns list of all available markets.
         */
        get: operations["GetMarkets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/my_markets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Trading markets
         * @description Returns all markets that can be traded on selected account.
         *
         */
        get: operations["GetUserTradingMarkets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/ohlc/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        /**
         * OHLC data
         * @description Returns OHLC (Open High Low Close) data.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing data for required field. | Step and limit parameters are missing. |
         *     | Not a valid choice. | Value entered in parameter is invalid. |
         *     | Must be between 1 and 1000. | Limit value must be between 1 and 1000. |
         *     </details>
         *
         */
        get: operations["GetOHLCData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/open_orders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Open orders
         * @description Return user's open orders. This API call is cached for 10 seconds. This call will be executed on the account (Sub or Main), to which the used API key is bound to.
         */
        post: operations["GetAllOpenOrders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/open_orders/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Open orders for market
         * @description Return user's open orders for market. This API call is cached for 10 seconds. This call will be executed on the account (Sub or Main), to which the used API key is bound to.
         */
        post: operations["GetOpenOrdersForMarket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/order_book/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        /**
         * Order book
         * @description Returns order book data.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | POST method not allowed for this request. | HTTP method other than GET used. |
         *     | Invalid GET parameter. | Missing group parameter. |
         *     | Internal error. | Order book unavailable. |
         *     </details>
         *
         */
        get: operations["GetOrderBook"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/order_status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Order status
         * @description Returns order status. This call will be executed on the account (Sub or Main), to which the
         *     used API key is bound to. Order can be fetched by using either id or client_order_id parameter. For closed
         *     orders, this call only returns information for the last 30 days. 'Order not found' error will be returned
         *     for orders outside this time range.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing id POST param | Id parameter missing. |
         *     | Invalid order id | Order id parameter can only be number. |
         *     | Order not found. | Order with that id was not found in our system. |
         *     </details>
         *
         */
        post: operations["GetOrderStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/revoke_all_api_keys/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revoke all API access
         * @description Revoke all API keys across all user's accounts.
         */
        post: operations["RevokeAllAPIKeys"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/ripple_address/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ripple IOU deposit address
         * @description This API call is cached for 60 seconds. This call will be executed on the account (Sub or Main), to which
         *     the used API key is bound to. This endpoint supports withdrawals of USD, BTC, EUR and ETH IOU on the XRP Ledger.
         *
         *     *IOU supported globally except in the US and Singapore. ETH-IOU is also unsupported in UK.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | User not verified | Your account needs to be verified before you can use this endpoint. |
         *     | Your deposits are currently disabled | No new deposits can be made at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |
         *     </details>
         *
         */
        post: operations["GetRippleIOUDepositAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/ripple_withdrawal/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ripple IOU withdrawal
         * @description This call will be executed on the account (Sub or Main), to which the used
         *     API key is bound to. This endpoint supports withdrawals of USD, BTC, EUR or ETH IOU on the XRP Ledger.
         *
         *     *IOU supported globally except in the US and Singapore. ETH-IOU is also unsupported in UK
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing amount and/or address POST parameters | One or both parameters missing. |
         *     | User not verified | Your account needs to be verified before you can use this endpoint. |
         *     | 'crypto_currency' withdrawals are currently unavailable for your account | Contact support for additional information. |
         *     | Not allowed to withdraw to specified 'crypto_currency' address | API key is set for withdrawing to another 'crypto_currency' address. |
         *     | Enter a number. Use "." as a decimal point | Amount parameter can only be number. |
         *     | You have only 'available' 'crypto_currency' available. Check your account balance for details | Account has less available 'crypto_currency' than are required to make this withdrawal. |
         *     | Your withdrawals are currently disabled | No new withdrawals can be opened at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |
         *     | Ensure this value is greater than or equal to 'minimum_withdrawal_amount' | Minimum withdrawal amount is 'minimum_withdrawal_amount'. |
         *     | Ensure this value has at least 'minimum_address_length' characters (it has x). Ensure this value has at most 'maximum_address_length' characters (it has x). | Address parameter must be between 'minimum_address_length' and 'maximum_address_length' characters long. |
         *     | Contact does not exist | Review and validate the contact_uuid to ensure it matches an existing contact, you may also create contacts at the /v2/travel_rule/contacts endpoint |
         *     | Contact is missing required information | Ensure that contact has all the required information in case of retail_info, first_name and last_name are required. |
         *     | Vasp does not exist | Verify that the vasp_uuid exists within the /v2/travel_rule/vasps endpoint. |
         *     | contact_uuid: You must set this field because contact_thirdparty=True | contact_uuid must be provided if withdrawing to a third party |
         *     | The address you provided is not verified | You must verify this address before you can withdraw to it. |
         *
         *     </details>
         *
         */
        post: operations["RequestRippleIOUWithdrawal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/sell/instant/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sell instant order
         * @description Open an instant sell order. By placing an instant order you acknowledge that the execution of your order
         *     depends on the market conditions and that these conditions may be subject to sudden changes that cannot be
         *     foreseen. This call will be executed on the account (Sub or Main), to which the used API key is bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing amount and/or price POST parameters | Missing one or both parameters. |
         *     | 'parameter': Enter a number. Use "." as a decimal point. | 'parameter' can only be number. |
         *     | Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |
         *     | You can only sell 'amount' 'currency'. Check your account balance for details. | Account has less 'available_currency' than is required to make this order. |
         *     | Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |
         *     </details>
         *
         */
        post: operations["OpenInstantSellOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/sell/market/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sell market order
         * @description Open a sell market order. By placing a market order you acknowledge that the execution of your order depends
         *     on the market conditions and that these conditions may be subject to sudden changes that cannot be
         *     foreseen. This call will be executed on the account (Sub or Main), to which the used API key is bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing amount and/or price POST parameters | Missing one or both parameters. |
         *     | 'parameter': Enter a number. Use "." as a decimal point. | 'parameter' can only be number. |
         *     | Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |
         *     | You can only sell 'amount' 'currency'. Check your account balance for details. | Account has less 'available_currency' than is required to make this order. |
         *     | No buy orders for currency pair 'currency_pair' | The buy side of the orderbook for 'currency_pair' is empty, therefore a market sell order cannot be placed. |
         *     | Maximum market sell amount at the moment is 'amount' 'currency'. Please use limit order instead. | Order amount exceeds the limit amount set for market sell orders. |
         *     | Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |
         *     </details>
         *
         */
        post: operations["OpenMarketSellOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/sell/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sell limit order
         * @description Open a sell limit order. This call will be executed on the account (Sub or Main), to which the used API key
         *     is bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing amount and/or price POST parameters | Missing one or both parameters. |
         *     | 'parameter': Enter a number. Use "." as a decimal point. | 'parameter' can only be number. |
         *     | Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |
         *     | Price is more than 20% below market price. | Order price must not exceed 20% of current price. |
         *     | You have only 'available_btc' BTC available. Check your account balance for details. | Account has less 'available_btc' than is required to make this order. |
         *     | Buy if executed price must be lower than sell price. | 'limit_price' must be lower than 'price' parameter. |
         *     | Both limit_price and daily_order cannot be set. | Only one of those parameters can be set. |
         *     | Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |
         *     </details>
         *
         */
        post: operations["OpenLimitSellOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/ticker/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * All currency pairs tickers
         * @description Return ticker data for all currency pairs. Passing any GET parameters, will result in your request being rejected.
         */
        get: operations["GetCurrencyPairTickers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/ticker/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        /**
         * Market ticker
         * @description Return ticker data for the requested currency pair. Passing any GET parameters, will result in your request being rejected.
         */
        get: operations["GetMarketTicker"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/ticker_hour/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        /**
         * Hourly  ticker
         * @description Return hourly ticker data for the requested currency pair. Passing any GET parameters, will result in your request being rejected.
         */
        get: operations["GetHourlyCurrencyPairTicker"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/transactions/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        /**
         * Transactions
         * @description Return transaction data from a given time frame.
         */
        get: operations["GetTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/transfer-from-main/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer balance from Main to Sub Account
         * @description Transfers the desired balance from your Main Account to a Sub Account, specified by the subAccount
         *     parameter. This call can only be performed by your Main Account.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | 'parameter': Enter a number. Use "." as a decimal point. | 'parameter' can only be number. |
         *     | You have only 'available' 'currency' available. Check your account balance for details. | Account has less 'available_currency' than is required to make this transfer. |
         *     | Select a valid choice. X is not one of the available choices. | X is not valid currency. Select a valid currency. |
         *     | Sub account with identifier "X" does not exist. | Can't find sub account with id X. |
         *     </details>
         *
         */
        post: operations["TransferFromMainToSub"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/transfer-to-main/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer balance from Sub to Main account
         * @description Transfers the desired balance from a Sub Account to your Main Account.
         *     Can be called by either the Main Account or a Sub Account, but requires a permission in both cases.
         *     The subAccount parameter must be provided if the Main Account is initiating the call.
         *     If a Sub Account is making the call, then it is the target Sub Account for the transfer and no further
         *     clarification is required.
         *     In that case, passing this parameter will have no additional effect.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | 'parameter': Enter a number. Use "." as a decimal point. | 'parameter' can only be number. |
         *     | You have only 'available' 'currency' available. Check your account balance for details. | Account has less 'available_currency' than is required to make this transfer. |
         *     | Select a valid choice. X is not one of the available choices. | X is not valid currency. Select a valid currency. |
         *     | Sub account with identifier "X" does not exist. | Can't find sub account with id X. |
         *     </details>
         *
         */
        post: operations["TransferFromSubToMain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/travel_rule/contacts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all contacts
         * @description Returns all contacts that have been previously created.
         *     These can then be used to provide the originator or beneficiary details of a Travel Rule message, when
         *     transferring crypto from/to the platform.
         *
         *     **The below table defines the HTTP Status codes that this API may return**
         *
         *     | Response Code | Status Code | Reason                                                                     |
         *     |---------------|-------------|----------------------------------------------------------------------------|
         *     | 200           |             | Successfully retrieved the list of contacts.                               |
         *     | 403           |             | You do not have sufficient permissions to access this endpoint.            |
         *
         */
        get: operations["GetAllContacts"];
        put?: never;
        /**
         * Create contact
         * @description Enables a contact to be created and relevant information to be provided and stored.
         *     This can then be used to provide the originator or beneficiary details of a Travel Rule message, when
         *     transferring crypto from/to the platform.
         *
         *     | Response Code | Status Code | Reason                                                                     |
         *     |---------------|-------------|----------------------------------------------------------------------------|
         *     | 201           |             | Successfully created the contact.                                          |
         *     | 403           |             | You do not have sufficient permissions to access this endpoint.            |
         *
         */
        post: operations["CreateContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/travel_rule/contacts/{contact_uuid}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contact_uuid: string;
            };
            cookie?: never;
        };
        /**
         * Get contact
         * @description Returns a specific contact that has been previously created.
         *     This can then be used to provide the originator or beneficiary details of a Travel Rule message, when
         *     transferring crypto from/to the platform.
         *
         *     **The below table defines the HTTP Status codes that this API may return**
         *
         *     | Response Code | Status Code | Reason                                                                     |
         *     |---------------|-------------|----------------------------------------------------------------------------|
         *     | 200           |             | Successfully retrieved the contact.                                        |
         *     | 403           |             | You do not have sufficient permissions to access this endpoint.            |
         *     | 404           |             | Contact with given contact uuid is not found.                              |
         *
         */
        get: operations["GetContact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/travel_rule/vasps/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * VASP list
         * @description A list of Virtual Asset Service Providers needed to comply with the Travel Rule.
         *     These may be needed when transferring cryptocurrency from/to the platform.
         *     This is required in cases where the originating or destination address of the crypto transfer
         *     is hosted by a VASP.
         *
         *     **The below table defines the HTTP Status codes that this API may return**
         *
         *     | Response Code | Status Code | Reason                                                                     |
         *     |---------------|-------------|----------------------------------------------------------------------------|
         *     | 200           |             | Successfully retrieved the vasp list.                                      |
         *     | 400           |             | Could not fetch VASP list, service unavailable.                            |
         *
         */
        get: operations["VaspList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/user_transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User transactions
         * @description Return user transactions from a given time frame. This call will be executed on the account (Sub
         *     or Main), to which the used API key is bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Invalid offset | Offset parameter should be number from 0 to 200000. |
         *     | Limit too large | Max value of limit parameter is 1000. |
         *     | Invalid limit | Limit parameter should be number from 1 to 1000. |
         *     | Invalid sort parameter | Sort parameter can only be 'asc' or 'desc'. |
         *     | Invalid since_timestamp parameter | since_timestamp can only be digit. |
         *     | since_timestamp parameter must be higher than .. | Make sure that since_timestamp is less than 30 days in the past. |
         *     | Failed to convert since_timestamp parameter | Check the value of since_timestamp parameter. |
         *     | Invalid until_timestamp parameter | until_timestamp can only be digit. |
         *     | until_timestamp parameter must be higher than .. | Make sure that until_timestamp is less than 30 days in the past. |
         *     | Failed to convert until_timestamp parameter | Check the value of until_timestamp parameter. |
         *     </details>
         *
         */
        post: operations["GetUserTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/user_transactions/{market_symbol}/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User transactions for market
         * @description Return user transactions for a market from a given time frame. This call will be executed on
         *     the account (Sub or Main), to which the used API key is bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Invalid offset | Offset parameter should be number from 0 to 200000. |
         *     | Limit too large | Max value of limit parameter is 1000. |
         *     | Invalid limit | Limit parameter should be number from 1 to 1000. |
         *     | Invalid sort parameter | Sort parameter can only be 'asc' or 'desc'. |
         *     | Invalid since_timestamp parameter | since_timestamp can only be digit. |
         *     | since_timestamp parameter must be higher than .. | Make sure that since_timestamp is less than 30 days in the past. |
         *     | Failed to convert since_timestamp parameter | Check the value of since_timestamp parameter. |
         *     | Invalid until_timestamp parameter | until_timestamp can only be digit. |
         *     | until_timestamp parameter must be higher than .. | Make sure that until_timestamp is less than 30 days in the past. |
         *     | Failed to convert until_timestamp parameter | Check the value of until_timestamp parameter. |
         *     </details>
         *
         */
        post: operations["GetUserTransactionsForMarket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/websockets_token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Websockets token
         * @description Generates token required for subscribing to private WebSocket channels.
         */
        post: operations["GetWebsocketToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/withdrawal-requests/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdrawal requests
         * @description Return user's withdrawal requests. This call will be executed on the account (Sub or Main), to which the
         *     used API key is bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Invalid timedelta | Timedelta needs to have only numeric characters. |
         *     | Timedelta too large | Timedelta too large. |
         *     | Invalid offset | Offset needs to be numeric characters between 0 and 200000. |
         *     | Invalid limit | Limit needs to be numeric characters between 1 and 1000. |
         *     | Invalid id | Id needs to have only numeric characters. |
         *     | Both limit and offset must be present | Both limit and offset must be present. |
         *     | Too many parameters | Pick one or combination of parameters and run again. |
         *     </details>
         *
         */
        post: operations["GetWithdrawalRequests"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/withdrawal/cancel/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel bank or crypto withdrawal
         * @description Cancels a bank or crypto withdrawal request. This call can only be performed by your Main Account.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Cancelling bank withdrawals with sub account API keys is not supported. | This API endpoint can only be utilized by your main account. |
         *     | Missing parameters: [...] | Parameters stated in the list ([...]) are required for this call. |
         *     | No active bank withdrawal with id=X found. | Could not find any active bank withdrawal with the id X. Will return the same response for already cancelled withdrawal requests. |
         *     | Cannot cancel a withdrawal in process (id=X). | The bank withdrawal request with id=X is currently being processed and cannot be cancelled. |
         *     | Your withdrawals are currently disabled | No bank withdrawals can be canceled at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |
         *     </details>
         *
         */
        post: operations["CancelWithdrawal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/withdrawal/open/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Open bank withdrawal
         * @description Opens a bank withdrawal request (SEPA or international). Withdrawal requests opened via API are
         *     automatically confirmed (no confirmation e-mail will be sent), but are processed just like withdrawals
         *     opened through the platform's interface. This call can only be performed by your Main Account.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Opening bank withdrawals with sub account API keys is not supported. | This API endpoint can only be utilized by your main account. |
         *     | 'X': ['This field is required.'] | Parameter X is required for this call. |
         *     | 'X': ['Select a valid choice. Y is not one of the available choices.'] | Y is not a valid value for parameter X. |
         *     | Bank withdrawals temporarily disabled. | No new bank withdrawals can be opened at this time. |
         *     | Unsupported withdrawal type (must be either SEPA or international). | When opening bank withdrawals, you must specify one of the two supported types: SEPA or international. |
         *     | When opening bank withdrawals, you must specify one of the two supported types: SEPA or international. | To open this withdrawal, your balance must have at least 'amount' of target currency available. |
         *     | 'X': ['Enter a number. Use "." as a decimal point.'] | Parameter X can only be a decimal number. |
         *     | Your withdrawals are currently disabled | No new withdrawals can be opened at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |
         *     </details>
         *
         */
        post: operations["RequestFiatWithdrawal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/withdrawal/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fiat withdrawal status
         * @description Checks the status of a fiat withdrawal request. This call can only be performed by your Main Account.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Performing bank withdrawal status checks with sub account API keys is not supported. | This API endpoint can only be utilized by your main account. |
         *     | Missing parameters: [...]. | Parameters stated in the list ([...]) are required for this call. |
         *     | No bank withdrawal with id=X found. | Could not find any bank withdrawal with the id X. |
         *     </details>
         *
         */
        post: operations["GetFiatWithdrawalStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/{currency}_address/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crypto deposit address
         * @description This call will be executed on the account (Sub or Main), to which the used API key is bound to.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | User not verified | Your account needs to be verified before you can use this endpoint. |
         *     | Your deposits are currently disabled | No new deposits can be made at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |
         *     | Invalid network selection | The selected network is not supported for 'currency'. Please select a compatible network for it. |
         *     </details>
         *
         */
        post: operations["GetCryptoDepositAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/{currency}_withdrawal/": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crypto withdrawal
         * @description Request a crypto withdrawal.
         *
         *     <details>
         *     <summary style='cursor: pointer'><strong>Possible errors</strong></summary>
         *
         *     | Reason | Action |
         *     | ----------- | ----------- |
         *     | Missing amount and/or address POST parameters | One or both parameters missing. |
         *     | User not verified | Your account needs to be verified before you can use this endpoint. |
         *     | 'crypto_currency' withdrawals are currently unavailable for your account | Contact support for additional information. |
         *     | Not allowed to withdraw to specified 'crypto_currency' address | API key is set for withdrawing to another 'crypto_currency' address. |
         *     | Enter a number. Use "." as a decimal point | Amount parameter can only be number. |
         *     | You have only 'available' 'crypto_currency' available. Check your account balance for details | Account has less available 'crypto_currency' than are required to make this withdrawal. |
         *     | Your withdrawals are currently disabled | No new withdrawals can be opened at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |
         *     | Ensure this value is greater than or equal to 'minimum_withdrawal_amount' | Minimum withdrawal amount is 'minimum_withdrawal_amount'. |
         *     | Ensure this value has at least 'minimum_address_length' characters (it has x). Ensure this value has at most 'maximum_address_length' characters (it has x). | Address parameter must be between 'minimum_address_length' and 'maximum_address_length' characters long. |
         *     | Invalid network selection | The selected network is not supported for 'currency'. Please select a compatible network for it. |
         *     | Contact does not exist | Review and validate the contact_uuid to ensure it matches an existing contact, you may also create contacts at the /v2/travel_rule/contacts endpoint |
         *     | Contact is missing required information | Ensure that contact has all the required information in case of retail_info, first_name and last_name are required. |
         *     | Vasp does not exist | Verify that the vasp_uuid exists within the /v2/travel_rule/vasps endpoint. |
         *     | contact_uuid: You must set this field because contact_thirdparty=True | contact_uuid must be provided if withdrawing to a third party |
         *     | The address you provided is not verified | You must verify this address before you can withdraw to it. |
         *     </details>
         *
         */
        post: operations["RequestCryptoWithdrawal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccountBalancesResponse: {
            /**
             * Format: decimal
             * @description Available balance for trading.
             * @example 90.00
             */
            readonly available?: string;
            /**
             * @description Currency name.
             * @example usd
             */
            readonly currency?: string;
            /**
             * Format: decimal
             * @description Reserved balance for trading.
             * @example 10.00
             */
            readonly reserved?: string;
            /**
             * Format: decimal
             * @description Total balance on exchange.
             * @example 100.00
             */
            readonly total?: string;
        };
        BankWithdrawalStatusRequest: {
            /**
             * @description ID of the withdrawal request.
             * @example 1
             */
            id: string;
        };
        BankWithdrawalStatusResponse: {
            /**
             * @description Status of the withdrawal request.
             * @example Waiting to be processed
             */
            readonly status?: string;
        };
        BuyInstantOrderRequest: {
            /**
             * @description Amount in counter currency (Example: For BTC/USD pair, amount is quoted in USD)
             * @example 100.00
             */
            amount: number;
            /**
             * @description Client order ID set by the client for internal reference. It should be unique, but there are no additional constraints or checks guaranteed on the field by Bitstamp.
             * @example 123456789
             */
            client_order_id?: string;
        };
        BuySellLimitOrderRequest: {
            /**
             * @description Amount.
             * @example 100.00
             */
            amount: number;
            /**
             * @description Price.
             * @example 100.00
             */
            price: number;
            /**
             * @description If the order gets executed, a new opposite order will be placed, with "limit_price" as its price.
             * @example 100.00
             */
            limit_price?: number;
            /**
             * @description Opens limit order which will be canceled at 0:00 UTC unless it already has been executed.
             * @example true
             */
            daily_order?: boolean;
            /**
             * @description An Immediate-Or-Cancel (IOC) order is an order that must be executed immediately. Any portion of an IOC order that cannot be filled immediately will be cancelled.
             * @example true
             */
            ioc_order?: boolean;
            /**
             * @description A Fill-Or-Kill (FOK) order is an order that must be executed immediately in its entirety. If the order cannot be immediately executed in its entirety, it will be cancelled.
             * @example true
             */
            fok_order?: boolean;
            /**
             * @description A Maker-Or-Cancel (MOC) order is an order that ensures it is not fully or partially filled when placed. In case it would be, the order is cancelled.
             * @example true
             */
            moc_order?: boolean;
            /**
             * @description A Good-Till-Date (GTD) lets you select an expiration time up until which the order will be open. Note that all GTD orders are cancelled at 00:00:00 UTC.
             * @example true
             */
            gtd_order?: boolean;
            /**
             * Format: int32
             * @description Unix timestamp in milliseconds. Required in case of GTD order.
             * @example 1643698764
             */
            expire_time?: number;
            /**
             * @description Client order ID set by the client for internal reference. It should be unique, but there are no additional constraints or checks guaranteed on the field by Bitstamp.
             * @example 123456789
             */
            client_order_id?: string;
        };
        BuySellMarketOrderRequest: {
            /**
             * @description Amount in base currency (Example: For BTC/USD pair, amount is quoted in BTC)
             * @example 100.00
             */
            amount: number;
            /**
             * @description Client order ID set by the client for internal reference. It should be unique, but there are no additional constraints or checks guaranteed on the field by Bitstamp.
             * @example 123456789
             */
            client_order_id?: string;
        };
        BuySellOrderResponse: {
            /**
             * @description Order ID.
             * @example 1234123412341234
             */
            readonly id?: string;
            /**
             * @description Market formatted as "BTC/USD".
             * @example BTC/USD
             */
            readonly market?: string;
            /**
             * Format: date-time
             * @description Date and time.
             * @example 2022-01-31 14:43:15.796000
             */
            readonly datetime?: string;
            /**
             * @description 0 (buy) or 1 (sell).
             * @example 0
             */
            readonly type?: string;
            /**
             * @description Price.
             * @example 2211.00
             */
            readonly price?: string;
            /**
             * @description Amount.
             * @example 45.00000000
             */
            readonly amount?: string;
            /**
             * @description Client order ID sent with request. Only returned if parameter was used in request.
             * @example 123456789
             */
            readonly client_order_id?: string;
        };
        CancelAllOrdersResponse: {
            readonly canceled?: components["schemas"]["Order"][];
            /**
             * @description "true" if all orders were successfully canceled and "false" otherwise
             * @example true
             */
            readonly success?: boolean;
        };
        CancelBankOrCryptoWithdrawalRequest: {
            /**
             * @description ID of the withdrawal request.
             * @example 1
             */
            id: string;
        };
        CancelBankWithdrawalResponse: {
            /**
             * @description Account currency (balance currency from which the withdrawal was requested) of the cancelled withdrawal request.
             * @example EUR
             */
            readonly account_currency?: string;
            /**
             * @description Amount of the cancelled withdrawal request.
             * @example 100
             */
            readonly amount?: number;
            /**
             * @description Currency of the cancelled withdrawal request.
             * @example EUR
             */
            readonly currency?: string;
            /**
             * @description ID of the cancelled withdrawal request.
             * @example 1
             */
            readonly id?: string;
            /**
             * @description The type of the cancelled withdrawal request.
             * @example EU bank transfer (SEPA)
             */
            readonly type?: string;
        };
        CancelOrderRequest: {
            /**
             * @description Order ID.
             * @example 1234123412341234
             */
            id?: string;
        };
        CancelOrderResponse: {
            /**
             * Format: int32
             * @description Order ID.
             * @example 1453282316578816
             */
            readonly id?: number;
            /**
             * @description Order amount.
             * @example 0.02035278
             */
            readonly amount?: number;
            /**
             * @description Order price.
             * @example 2100.45
             */
            readonly price?: number;
            /**
             * Format: int32
             * @description Order type.
             * @example 0
             */
            readonly type?: number;
            /**
             * @description Market formatted as "BTC/USD".
             * @example BTC/USD
             */
            readonly market?: string;
        };
        ContactSchema: {
            /**
             * @description Additional info if the beneficiary is a corporate client
             * @example {
             *       "company_name": "Good company"
             *     }
             */
            corporate_info?: components["schemas"]["CorporateInfo"];
            /**
             * @description Alias for your internal usage of the contact
             * @example
             */
            description: string;
            /**
             * Format: uuid
             * @description Id of the contact
             * @example 258b8c23-48c0-4916-bba9-0dd47bcdd7cf
             */
            readonly id: string;
            /**
             * @description Additional info if the beneficiary is a retail client
             * @example {
             *       "first_name": "John",
             *       "last_name": "Doe"
             *     }
             */
            retail_info?: components["schemas"]["RetailInfo"];
        };
        CorporateInfo: {
            address?: string;
            /** @description Name of the company */
            company_name?: string;
            /** @description ISO 3166-1 alpha 2 country code */
            country?: string;
        };
        CryptoTransaction: {
            /**
             * @description Amount.
             * @example 0.00012
             */
            readonly amount?: number;
            /**
             * @description Currency.
             * @example BTC
             */
            readonly currency?: string;
            /**
             * Format: int32
             * @description Date and time.
             * @example 1642665114
             */
            readonly datetime?: number;
            /**
             * @description Destination address.
             * @example 3FiKkjgZ6Sj4RWp3ZsCjYh5Pt7ZCBsL7uF
             */
            readonly destinationAddress?: string;
            /**
             * @description Cryptocurrency network.
             * @example bitcoin
             * @enum {string}
             */
            readonly network?: "bitcoin-cash" | "bitcoin" | "ethereum" | "litecoin" | "stellar" | "xrpl" | "algorand" | "flare" | "hedera" | "cardano" | "songbird" | "avalanche-c-chain" | "solana" | "polkadot" | "near" | "doge" | "sui" | "casper" | "multiversx" | "internet-computer" | "xdc-network" | "coreum" | "arbitrum-one" | "sei" | "op-mainnet";
            /**
             * @description Transaction hash.
             * @example e4123d1d57df4106aaae5ec4d77eb6cd42e226d020a0a2c1c7919d14b932494b
             */
            readonly txid?: string;
        };
        CryptoTransactionsRequest: {
            /**
             * @description True - shows also ripple IOU transactions.
             * @example false
             */
            include_ious?: boolean;
            /**
             * Format: int32
             * @description Limit result to that many transactions (default: 100; maximum: 1000).
             * @example 100
             */
            limit?: number;
            /**
             * Format: int32
             * @description Skip that many transactions before returning results (default: 0, maximum: 200000).
             * @example 0
             */
            offset?: number;
        };
        CryptoTransactionsResponse: {
            /** @description Deposits. */
            deposits?: components["schemas"]["CryptoTransaction"][];
            /** @description Ripple IOU transactions. */
            ripple_iou_transactions?: components["schemas"]["CryptoTransaction"][];
            /** @description Withdrawals. */
            withdrawals?: components["schemas"]["CryptoTransaction"][];
        };
        CryptoWithdrawalRequest: {
            /**
             * @description Cryptocurrency address.
             * @example aMDHooGmAkyrsaQiKhAORhSNTmoRzxqWIO
             */
            address: string;
            /**
             * @description Cryptocurrency amount.
             * @example 1
             */
            amount: number;
            /** @description If the address you are withdrawing to is in your name (regardless of if this is a hosted or unhosted wallet), this should be set to False. If you are withdrawing to a third party, set it to True */
            contact_thirdparty?: boolean;
            /**
             * Format: uuid
             * @description If setting the contact_thirdparty field to True, you need to provide the UUID of the contact from the /v2/travel_rule/contacts/ endpoint
             */
            contact_uuid?: string;
            /**
             * @description Address destination tag - applicable to: XRP.
             * @example 12345
             */
            destination_tag: string;
            /**
             * @description Address memo id - applicable to: XLM, HBAR, GYEN, VCHF, VEUR, ZUSD, COREUM, SEI.
             * @example 12345
             */
            memo_id?: string;
            /**
             * @description Cryptocurrency network.
             * @example bitcoin
             * @enum {string}
             */
            network?: "bitcoin-cash" | "bitcoin" | "ethereum" | "litecoin" | "stellar" | "xrpl" | "algorand" | "flare" | "hedera" | "cardano" | "songbird" | "avalanche-c-chain" | "solana" | "polkadot" | "near" | "doge" | "sui" | "casper" | "multiversx" | "internet-computer" | "xdc-network" | "coreum" | "arbitrum-one" | "sei" | "op-mainnet";
            /**
             * Format: int32
             * @description Address transfer id - applicable to: CSPR.
             * @example 12345
             */
            transfer_id?: number;
            /**
             * Format: uuid
             * @description When withdrawing to a hosted wallet by a Virtual Asset Services Provider, provide the UUID from the /v2/travel_rule/vasps/ endpoint
             */
            vasp_uuid?: string;
        };
        CryptoWithdrawalResponse: {
            /**
             * Format: int32
             * @description Withdrawal ID.
             * @example 1
             */
            readonly id?: number;
        };
        CurrencyNetwork: {
            /** @example Enabled */
            readonly deposit?: string;
            /** @example ethereum */
            readonly network: string;
            /** @example Enabled */
            readonly withdrawal?: string;
            /**
             * Format: int32
             * @example 8
             */
            readonly withdrawal_decimals: number;
            /** @example 0.01 */
            readonly withdrawal_minimum_amount?: string;
        };
        CurrencySchema: {
            /** @example Bitcoin */
            readonly name: string;
            /** @example BTC */
            readonly currency: string;
            /**
             * @example crypto
             * @enum {string}
             */
            readonly type: "crypto" | "fiat";
            /** @example ₿ */
            readonly symbol: string;
            /**
             * Format: int32
             * @example 8
             */
            readonly decimals: number;
            /** @example https://assets.bitstamp.net/static/webapp/images/currencies/btc.8f1b1e09e4fa24d3fde4d2a158a6df9a34261bb3.svg */
            readonly logo?: string;
            /** @example 234565.232 */
            readonly available_supply: string;
            /** @example Enabled */
            readonly deposit?: string;
            /** @example Enabled */
            readonly withdrawal?: string;
            readonly networks?: components["schemas"]["CurrencyNetwork"][];
        };
        DepositAddressRequest: {
            /**
             * @description Cryptocurrency network.
             * @example bitcoin
             * @enum {string}
             */
            network?: "bitcoin-cash" | "bitcoin" | "ethereum" | "litecoin" | "stellar" | "xrpl" | "algorand" | "flare" | "hedera" | "cardano" | "songbird" | "avalanche-c-chain" | "solana" | "polkadot" | "near" | "doge" | "sui" | "casper" | "multiversx" | "internet-computer" | "xdc-network" | "coreum" | "arbitrum-one" | "sei" | "op-mainnet";
        };
        DepositAddressResponse: {
            /**
             * @description Address for requested currency.
             * @example 0x6a56f5b80f04b4fd70d64d72e1396698635e5436
             */
            readonly address?: string;
            /**
             * Format: int32
             * @description Destination tag in case of currency XRP or Ripple, otherwise not present.
             * @example 89473951
             */
            readonly destination_tag?: number;
            /**
             * @description Memo ID in case of network HBAR or XLM, otherwise not present.
             * @example 299576079
             */
            readonly memo_id?: string;
            /**
             * Format: int32
             * @description Transfer ID in case of network CSPR, otherwise not present.
             * @example 89473951
             */
            readonly transfer_id?: number;
        };
        EarnSubscriptionSchema: {
            /**
             * @description Amount to subscribe or unsubscribe with.
             * @example 10
             */
            amount: number;
            /**
             * @description Currency
             * @example ETH
             */
            currency: string;
            /**
             * @description Type of Earn term
             * @example FLEXIBLE
             * @enum {string}
             */
            earn_term: "FLEXIBLE" | "FIXED";
            /**
             * @description Type of Earn product
             * @example STAKING
             * @enum {string}
             */
            earn_type: "STAKING" | "LENDING";
        };
        EarnSubscriptionSettingSchema: {
            /**
             * @description Currency
             * @example ALGO
             */
            currency: string;
            /**
             * @description Type of Earn product
             * @example STAKING
             * @enum {string}
             */
            earn_type: "STAKING" | "LENDING";
            /**
             * @description Type of setting action.
             * @example OPT_IN
             * @enum {string}
             */
            setting: "OPT_IN" | "OPT_OUT";
        };
        EarnSubscriptionsSchema: {
            /**
             * @description Expected time until earn option starts to earn rewards
             * @example 24 hours
             */
            readonly activation_period?: string;
            /**
             * @description Amount on which you are earning interest
             * @example 1
             */
            readonly amount?: number;
            /**
             * @description Amount that has been earned
             * @example 2
             */
            readonly amount_earned?: number;
            /**
             * @description Amount on which you are earning interest that is available to withdraw from Earn
             * @example 1
             */
            readonly available_amount?: number;
            /**
             * @description Currency
             * @example ETH
             */
            readonly currency?: string;
            /**
             * @description Period in which the rewards are distributed
             * @example DAILY
             * @enum {string}
             */
            readonly distribution_period?: "DAILY" | "WEEKLY" | "MONTHLY" | "QUARTERLY";
            /**
             * @description Estimated annual yield
             * @example 10
             */
            readonly estimated_annual_yield?: number;
            /**
             * @description Minimum amount for subscription
             * @example 0
             */
            readonly minimum_subscription_amount?: number;
            /**
             * @description Type of Earn term
             * @example FIXED
             * @enum {string}
             */
            readonly term?: "FLEXIBLE" | "FIXED";
            /**
             * @description Type of Earn product
             * @example LENDING
             * @enum {string}
             */
            readonly type?: "STAKING" | "LENDING";
        };
        EarnTransactionSchema: {
            /**
             * @description Amount in base currency
             * @example 10
             */
            readonly amount?: number;
            /**
             * @description Currency
             * @example ETH
             */
            readonly currency?: string;
            /**
             * Format: date-time
             * @description Date and time of earn history event
             * @example 2022-01-31 14:43:15.796000
             */
            readonly datetime?: string;
            /**
             * @description Currency in which value is calculated
             * @example USD
             */
            readonly quote_currency?: string;
            /**
             * @description Status of earn history event
             * @example COMPLETED
             * @enum {string}
             */
            readonly status?: "PENDING" | "COMPLETED" | "CANCELED" | "FAILED";
            /**
             * @description Type of earn history event
             * @example SUBSCRIBE
             * @enum {string}
             */
            readonly type?: "STAKE" | "UNSTAKE" | "REWARD_RECEIVED" | "OPT_IN" | "OPT_OUT" | "SUBSCRIBE" | "UNSUBSCRIBE";
            /**
             * @description Amount in quote currency
             * @example 100
             */
            readonly value?: number;
        };
        EmptySchema: Record<string, never>;
        ErrorResponse: {
            /**
             * @description Error reason.
             * @example The reason for the error.
             */
            readonly reason?: string;
            /**
             * @description "error"
             * @example error
             */
            readonly status?: string;
        };
        ErrorSchema: {
            code: string;
            field?: string;
            message?: string;
        };
        EurUsdConversionRateResponse: {
            /**
             * @description Buy conversion rate.
             * @example 16.52234567
             */
            readonly buy?: string;
            /**
             * @description Sell conversion rate.
             * @example 0.06577932
             */
            readonly sell?: string;
        };
        Fee: {
            /**
             * Format: decimal
             * @description Fee for maker of the market.
             * @example 0.15000
             */
            readonly maker?: string;
            /**
             * Format: decimal
             * @description Fee for taker of the market.
             * @example 0.16000
             */
            readonly taker?: string;
        };
        FeeTradingResponse: {
            /**
             * @description Currency pair name (deprecated).
             * @example btcusd
             */
            readonly currency_pair?: string;
            /**
             * @description Dictionary of maker and taker fees.
             * @example [
             *       {
             *         "maker": "0.15000",
             *         "taker": "0.16000"
             *       }
             *     ]
             */
            fees?: components["schemas"]["Fee"][];
            /**
             * @description Market for fees.
             * @example btcusd
             */
            readonly market?: string;
        };
        FeeWithdrawalRequest: {
            /**
             * @description Cryptocurrency network.
             * @example bitcoin
             * @enum {string}
             */
            network?: "bitcoin-cash" | "bitcoin" | "ethereum" | "litecoin" | "stellar" | "xrpl" | "algorand" | "flare" | "hedera" | "cardano" | "songbird" | "avalanche-c-chain" | "solana" | "polkadot" | "near" | "doge" | "sui" | "casper" | "multiversx" | "internet-computer" | "xdc-network" | "coreum" | "arbitrum-one" | "sei" | "op-mainnet";
        };
        FeeWithdrawalResponse: {
            /**
             * @description Currency name.
             * @example btc
             */
            readonly currency?: string;
            /**
             * Format: decimal
             * @description Customer withdrawal fee.
             * @example 0.00015000
             */
            readonly fee?: string;
            /**
             * @description Cryptocurrency network.
             * @example bitcoin
             * @enum {string}
             */
            readonly network?: "bitcoin-cash" | "bitcoin" | "ethereum" | "litecoin" | "stellar" | "xrpl" | "algorand" | "flare" | "hedera" | "cardano" | "songbird" | "avalanche-c-chain" | "solana" | "polkadot" | "near" | "doge" | "sui" | "casper" | "multiversx" | "internet-computer" | "xdc-network" | "coreum" | "arbitrum-one" | "sei" | "op-mainnet";
        };
        InstantConvertAddressInfoRequest: {
            /**
             * @description Shows transactions for specific instant convert address or for all users instant convert addresses.
             * @example 3MDvHUAg41uJx1511gDotsf4ccKuc9frz1
             */
            address?: string;
        };
        InstantConvertAddressInfoResponse: {
            /**
             * @description Address set for automatic conversion
             * @example 3MDvHUAg41uJx1511gDotsf4ccKuc9frz1
             */
            readonly address?: string;
            /**
             * @description Currency pair.
             * @example BTC/USD
             */
            readonly currency_pair?: string;
            /**
             * @description List of transactions.
             * @example [
             *       {
             *         "count": 1,
             *         "order_id": 1,
             *         "trades": [
             *           {
             *             "btc_amount": "1.0",
             *             "exchange_rate": "1.0",
             *             "fees": "0.0"
             *           }
             *         ]
             *       }
             *     ]
             */
            transactions?: components["schemas"]["Transaction"][];
        };
        MarketSchema: {
            /**
             * @description Market name.
             * @example BTC/USD
             */
            readonly name?: string;
            /**
             * @description Symbol of market (used in url).
             * @example btcusd
             */
            readonly market_symbol?: string;
            /**
             * @description Market's base currency
             * @example BTC
             */
            readonly base_currency?: string;
            /**
             * Format: int32
             * @description Decimal precision for base currency (BTC/USD - base: BTC).
             * @example 8
             */
            readonly base_decimals?: number;
            /**
             * @description Market's counter currency
             * @example USD
             */
            readonly counter_currency?: string;
            /**
             * Format: int32
             * @description Decimal precision for counter currency (BTC/USD - counter: USD).
             * @example 2
             */
            readonly counter_decimals?: number;
            /**
             * @description Minimum order size in counter currency.
             * @example 20.0
             */
            readonly minimum_order_value?: string;
            /**
             * @description Maximum order size in counter currency.
             * @example 200.0
             */
            readonly maximum_order_value?: string;
            /**
             * @description Minimum order amount in base currency.
             * @example 0.01
             */
            readonly minimum_order_amount?: string;
            /**
             * @description Maximum order amount in base currency.
             * @example 10
             */
            readonly maximum_order_amount?: string;
            /**
             * @description Trading engine status (Enabled/Disabled).
             * @example Enabled
             * @enum {string}
             */
            readonly trading?: "Enabled" | "Disabled";
            /**
             * Format: int32
             * @description Decimal precision for counter currency for instant buy and cash sell orders.
             * @example 2
             */
            readonly instant_order_counter_decimals?: number;
            /**
             * @description Instant and market orders status (Enabled/Disabled).
             * @example Enabled
             * @enum {string}
             */
            readonly instant_and_market_orders?: "Enabled" | "Disabled";
            /**
             * @description Market description.
             * @example Bitcoin / U.S. dollar
             */
            readonly description?: string;
        };
        NewInstantConvertAddressRequest: {
            /**
             * @description 	Address format. Can be either "P2SHP2WSH" or "BECH32".
             * @example P2SHP2WSH
             */
            address_format?: string;
            /**
             * @description Deposited BTCs will be automatically converted to liquidation_currency.
             * @example BTC
             */
            liquidation_currency?: string;
        };
        NewInstantConvertAddressResponse: {
            /**
             * @description Address set for automatic conversion.
             * @example 3MDvHUAg41uJx1511gDotsf4ccKuc9frz1
             */
            readonly address?: string;
        };
        OHLCData: {
            /**
             * @description Unix timestamp date and time.
             * @example 1643630400
             */
            readonly timestamp?: string;
            /**
             * @description Opening price.
             * @example 2188.97
             */
            readonly open?: string;
            /**
             * @description Price high.
             * @example 2211.00
             */
            readonly high?: string;
            /**
             * @description Price low.
             * @example 2188.97
             */
            readonly low?: string;
            /**
             * @description Closing price.
             * @example 2188.97
             */
            readonly close?: string;
            /**
             * @description Volume.
             * @example 4.01560417
             */
            readonly volume?: string;
        };
        OHLCDataResponseSchema: {
            /**
             * @description Trading pair.
             * @example BTC/USD
             */
            pair?: string;
            /** @description OHLC data. */
            ohlc?: components["schemas"]["OHLCData"][];
        };
        OpenBankWithdrawalRequest: {
            /**
             * @description The balance from which you wish to withdraw. Can be either "USD", "EUR" or "GBP".
             * @example USD
             */
            account_currency: string;
            /**
             * @description User or company address.
             * @example Street 1
             */
            address: string;
            /**
             * @description The amount to withdraw.
             * @example 100.0
             */
            amount: string;
            /**
             * @description Target bank address (international withdrawals only).
             * @example Street 1
             */
            bank_address?: string;
            /**
             * @description Target bank city (international withdrawals only).
             * @example City
             */
            bank_city?: string;
            /**
             * @description Target bank country. Country codes must be in accordance with the ISO 3166-1 standard (use two character Alpha-2 codes). Disclaimer: Not all country choices listed at this reference URL are supported. For a detailed list please refer to our platform's withdrawal interfaces (international withdrawals only).
             * @example SI
             */
            bank_country?: string;
            /**
             * @description Target bank name (international withdrawals only).
             * @example Bank
             */
            bank_name?: string;
            /**
             * @description Target bank postal code (international withdrawals only).
             * @example 0000
             */
            bank_postal_code?: string;
            /**
             * @description The target bank BIC.
             * @example XXXXYY00
             */
            bic: string;
            /**
             * @description User or company city.
             * @example City
             */
            city: string;
            /**
             * @description Withdrawal comment.
             * @example Comment.
             */
            comment?: string;
            /**
             * @description User or company country. Country codes must be in accordance with the ISO 3166-1 standard (use two character Alpha-2 codes). Disclaimer: Not all country choices listed at this reference URL are supported. For a detailed list please refer to our platform's withdrawal interfaces.
             * @example SI
             */
            country: string;
            /**
             * @description The currency in which the funds should be withdrawn (may involve conversion fees). Currency codes must be in accordance with the ISO 4217 standard. Disclaimer: Not all currency choices listed at this reference URL are supported. For a detailed list please refer to our platform's withdrawal interfaces. (international withdrawals only)
             * @example USD
             */
            currency?: string;
            /**
             * @description User or company IBAN.
             * @example SI56 0000 0000 0000 000
             */
            iban: string;
            /**
             * @description Full user or company name.
             * @example John Doe
             */
            name: string;
            /**
             * @description User or company postal code.
             * @example 0000
             */
            postal_code: string;
            /**
             * @description Type of the withdrawal request ("sepa" or "international").
             * @example international
             */
            type: string;
        };
        OpenBankWithdrawalResponse: {
            /**
             * Format: int32
             * @description Withdrawal ID.
             * @example 1
             */
            readonly withdrawal_id?: number;
        };
        OpenOrdersAllResponse: {
            /**
             * @description Order ID.
             * @example 1234123412341234
             */
            readonly id?: string;
            /**
             * @description Date and time.
             * @example 2022-01-31 14:43:15
             */
            readonly datetime?: string;
            /**
             * @description Order type: 0 - buy; 1 - sell.
             * @example 0
             */
            readonly type?: string;
            /**
             * @description Price.
             * @example 100.00
             */
            readonly price?: string;
            /**
             * @description Remaining amount.
             * @example 0.50000000
             */
            readonly amount?: string;
            /**
             * @description Initial amount.
             * @example 0.50000000
             */
            readonly amount_at_create?: string;
            /**
             * @description Currency Pair (deprecated).
             * @example BTC/USD
             */
            readonly currency_pair?: string;
            /**
             * @description Market formatted as "BTC/USD".
             * @example BTC/USD
             */
            readonly market?: string;
            /**
             * @description Limit price. (Only returned if limit order was placed with limit_price parameter.)
             * @example 110.00
             */
            readonly limit_price?: string;
            /**
             * @description Client order id. (Only returned if order was placed with client order id parameter.)
             * @example 1234123412341234
             */
            readonly client_order_id?: string;
        };
        OpenOrdersPairResponse: {
            /**
             * @description Order ID.
             * @example 1234123412341234
             */
            readonly id?: string;
            /**
             * @description Date and time.
             * @example 2022-01-31 14:43:15
             */
            readonly datetime?: string;
            /**
             * @description Order type: 0 - buy; 1 - sell.
             * @example 0
             */
            readonly type?: string;
            /**
             * @description Price.
             * @example 100.00
             */
            readonly price?: string;
            /**
             * @description Remaining amount.
             * @example 0.50000000
             */
            readonly amount?: string;
            /**
             * @description Initial amount.
             * @example 0.50000000
             */
            readonly amount_at_create?: string;
            /**
             * @description Market formatted as "BTC/USD".
             * @example BTC/USD
             */
            readonly market?: string;
            /**
             * @description Limit price. (Only returned if limit order was placed with limit_price parameter.)
             * @example 110.00
             */
            readonly limit_price?: string;
            /**
             * @description Client order id. (Only returned if order was placed with client order id parameter.)
             * @example 1234123412341234
             */
            readonly client_order_id?: string;
        };
        Order: {
            /**
             * Format: int32
             * @description Order ID.
             * @example 1453282316578816
             */
            readonly id?: number;
            /**
             * @description Order amount.
             * @example 0.02035278
             */
            readonly amount?: number;
            /**
             * @description Order price.
             * @example 2100.45
             */
            readonly price?: number;
            /**
             * Format: int32
             * @description Order type.
             * @example 0
             */
            readonly type?: number;
            /**
             * @description Currency pair formatted as "BTC/USD".
             * @example BTC/USD
             */
            readonly currency_pair?: string;
            /**
             * @description Market formatted as "BTC/USD".
             * @example BTC/USD
             */
            readonly market?: string;
        };
        OrderBookResponse: {
            /**
             * @description List of sell orders.
             * @example [
             *       [
             *         "9484.34",
             *         "1.00000000"
             *       ]
             *     ]
             */
            readonly asks?: string[][];
            /**
             * @description List of buy orders.
             * @example [
             *       [
             *         "9484.34",
             *         "1.00000000"
             *       ]
             *     ]
             */
            readonly bids?: string[][];
            /**
             * @description Unix timestamp date and time in microseconds.
             * @example 1643643584684047
             */
            readonly microtimestamp?: string;
            /**
             * @description Unix timestamp date and time.
             * @example 1643643584
             */
            readonly timestamp?: string;
        };
        OrderStatusRequest: {
            /**
             * @description Order ID.
             * @example 1234123412341234
             */
            id?: string;
            /**
             * @description (Optional) Client order id. (Can only be used if order was placed with client order id parameter.).
             * @example 1234123412341234
             */
            client_order_id?: string;
            /**
             * @description (Optional) Omits list of transactions for order ID. Possible value: True
             * @example true
             */
            omit_transactions?: string;
        };
        OrderStatusResponse: {
            /**
             * Format: int32
             * @description Order ID.
             * @example 1458532827766784
             */
            readonly id?: number;
            /**
             * @description Date and time.
             * @example 2022-01-31 14:43:15
             */
            readonly datetime?: string;
            /**
             * @description Type: 0 - buy; 1 - sell.
             * @example 0
             */
            readonly type?: string;
            /**
             * @description Open, Finished, Expired or Canceled.
             * @example Open
             */
            readonly status?: string;
            /**
             * @description Market formatted as "BTC/USD".
             * @example BTC/USD
             */
            readonly market?: string;
            readonly transactions?: components["schemas"]["OrderTransaction"][];
            /**
             * Format: decimal
             * @description Amount remaining.
             * @example 100.00
             */
            readonly amount_remaining?: string;
            /**
             * @description Client order id. (Only returned if order was placed with client order id parameter.).
             * @example 0.50000000
             */
            readonly client_order_id?: string;
        };
        OrderTransaction: {
            /**
             * Format: int32
             * @description Transaction ID.
             * @example 1
             */
            readonly tid?: number;
            /**
             * @description Price.
             * @example 100.00
             */
            readonly price?: string;
            /**
             * @description {from_currency} amount.
             * @example 101.00
             */
            readonly "{from_currency}"?: string;
            /**
             * @description {to_currency} amount.
             * @example 1
             */
            readonly "{to_currency}"?: string;
            /**
             * @description Transaction fee.
             * @example 1.00
             */
            readonly fee?: string;
            /**
             * @description Date and time.
             * @example 2022-01-31 14:43:15
             */
            readonly datetime?: string;
            /**
             * Format: int32
             * @description Transaction type: 0 - deposit; 1 - withdrawal; 2 - market trade.
             * @example 0
             */
            readonly type?: number;
        };
        /**
         * Pagination schema
         * @description         Pagination schema for response.
         *             Args:
         *                 page: (int) page number
         *                 size: (int) page full size
         *                 count:  (int) number of items in current page
         *
         */
        PaginationSchema: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int32 */
            readonly count?: number;
        };
        RetailInfo: {
            city?: string;
            /** @description ISO 3166-1 alpha 2 country code */
            country?: string;
            /** Format: date */
            date_of_birth?: string;
            /** @description First name of the contact */
            first_name: string;
            /** @description Last name of the contact */
            last_name: string;
            street_and_house_number?: string;
            zip?: string;
        };
        RevokedAPIKeySchema: {
            /**
             * @description API keys that were revoked.
             * @example [
             *       "rkBWB2SMjCyU4lJKQvjRNwszMr11kSRU",
             *       "beXTolq77X3GU70rpmBNjwNrvazuHYx8",
             *       "ltIGEkaqvb79wdRuJk1RLa2MrLdSJMlC"
             *     ]
             */
            revoked_api_keys?: string[];
        };
        RippleIOUDepositAddressResponse: {
            /**
             * @description Ripple address.
             * @example rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B
             */
            readonly address?: string;
            /**
             * Format: int32
             * @description Destination tag.
             * @example 89473951
             */
            readonly destination_tag?: number;
        };
        RippleIOUWithdrawalRequest: {
            /**
             * @description Ripple address.
             * @example rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B
             */
            address: string;
            /**
             * @description Currency amount.
             * @example 123
             */
            amount: number;
            /** @description If the address you are withdrawing to is in your name (regardless of if this is a hosted or unhosted wallet), this should be set to False. If you are withdrawing to a third party, set it to True */
            contact_thirdparty?: boolean;
            /**
             * Format: uuid
             * @description If setting the contact_thirdparty field to True, you need to provide the UUID of the contact from the /v2/travel_rule/contacts/ endpoint
             */
            contact_uuid?: string;
            /**
             * @description Currency to withdraw.
             * @example USD
             */
            currency: string;
            /**
             * Format: uuid
             * @description When withdrawing to a hosted wallet by a Virtual Asset Services Provider, provide the UUID from the /v2/travel_rule/vasps/ endpoint
             */
            vasp_uuid?: string;
        };
        RippleIOUWithdrawalResponse: {
            /**
             * Format: int32
             * @description Withdrawal ID.
             * @example 1
             */
            readonly id?: number;
        };
        SellInstantOrderRequest: {
            /**
             * @description Amount in base currency (Example: For BTC/USD pair, amount is quoted in BTC)
             * @example 100.00
             */
            amount: number;
            /**
             * @description (Optional) Instant sell orders allow you to sell an amount of the base currency determined by the value of it in the counter-currency. Amount_in_counter sets the amount parameter to refer to the counter currency instead of the base currency of the selected trading pair. Possible value: True
             * @example false
             */
            amount_in_counter?: boolean;
            /**
             * @description Client order ID set by the client for internal reference. It should be unique, but there are no additional constraints or checks guaranteed on the field by Bitstamp.
             * @example 123456789
             */
            client_order_id?: string;
        };
        SimpleErrorResponse: {
            /**
             * @description The reason for the error.
             * @example The reason for the error.
             */
            readonly error?: string;
        };
        TickerHourResponse: {
            /**
             * @description Lowest sell order.
             * @example 43521.92
             */
            readonly ask?: string;
            /**
             * @description Highest buy order.
             * @example 43499.58
             */
            readonly bid?: string;
            /**
             * @description Last hour price high.
             * @example 43701.83
             */
            readonly high?: string;
            /**
             * @description Last price.
             * @example 43505.90
             */
            readonly last?: string;
            /**
             * @description Last hour price low.
             * @example 43416.85
             */
            readonly low?: string;
            /**
             * @description First price of the hour.
             * @example 43640.06
             */
            readonly open?: string;
            /**
             * @description Ticker side: 0 - buy; 1 - sell.
             * @example 0
             */
            readonly side?: string;
            /**
             * @description Unix timestamp date and time.
             * @example 1644405321
             */
            readonly timestamp?: string;
            /**
             * @description Last hour volume.
             * @example 26.24890063
             */
            readonly volume?: string;
            /**
             * @description Last hour volume weighted average price.
             * @example 43578.11
             */
            readonly vwap?: string;
        };
        TickerResponse: {
            /**
             * @description Lowest sell order.
             * @example 2211.00
             */
            readonly ask?: string;
            /**
             * @description Highest buy order.
             * @example 2188.97
             */
            readonly bid?: string;
            /**
             * @description Last 24 hours price high.
             * @example 2811.00
             */
            readonly high?: string;
            /**
             * @description Last price.
             * @example 2211.00
             */
            readonly last?: string;
            /**
             * @description Last 24 hours price low.
             * @example 2188.97
             */
            readonly low?: string;
            /**
             * @description First price of the day.
             * @example 2211.00
             */
            readonly open?: string;
            /**
             * @description 24 hours time delta transaction price
             * @example 2211.00
             */
            readonly open_24?: string;
            /**
             * @description 24 hours price change percent
             * @example 13.57
             */
            readonly percent_change_24?: string;
            /**
             * @description Ticker side: 0 - buy; 1 - sell.
             * @example 0
             */
            readonly side?: string;
            /**
             * @description Unix timestamp date and time.
             * @example 1643640186
             */
            readonly timestamp?: string;
            /**
             * @description Last 24 hours volume.
             * @example 213.26801100
             */
            readonly volume?: string;
            /**
             * @description Last 24 hours volume weighted average price.
             * @example 2189.80
             */
            readonly vwap?: string;
        };
        TickerWithPairResponse: {
            /**
             * @description Lowest sell order.
             * @example 2211.00
             */
            readonly ask?: string;
            /**
             * @description Highest buy order.
             * @example 2188.97
             */
            readonly bid?: string;
            /**
             * @description Last 24 hours price high.
             * @example 2811.00
             */
            readonly high?: string;
            /**
             * @description Last price.
             * @example 2211.00
             */
            readonly last?: string;
            /**
             * @description Last 24 hours price low.
             * @example 2188.97
             */
            readonly low?: string;
            /**
             * @description First price of the day.
             * @example 2211.00
             */
            readonly open?: string;
            /**
             * @description 24 hours time delta transaction price
             * @example 2211.00
             */
            readonly open_24?: string;
            /**
             * @description Currency pair name
             * @example BTC/USD
             */
            readonly pair?: string;
            /**
             * @description 24 hours price change percent
             * @example 13.57
             */
            readonly percent_change_24?: string;
            /**
             * @description Ticker side: 0 - buy; 1 - sell.
             * @example 0
             */
            readonly side?: string;
            /**
             * @description Unix timestamp date and time.
             * @example 1643640186
             */
            readonly timestamp?: string;
            /**
             * @description Last 24 hours volume.
             * @example 213.26801100
             */
            readonly volume?: string;
            /**
             * @description Last 24 hours volume weighted average price.
             * @example 2189.80
             */
            readonly vwap?: string;
        };
        Trade: {
            /**
             * @description BTC amount.
             * @example 1.0
             */
            readonly btc_amount?: string;
            /**
             * @description Exchange rate.
             * @example 1.0
             */
            readonly exchange_rate?: string;
            /**
             * @description Fees.
             * @example 0.0
             */
            readonly fees?: string;
        };
        TradingPair: {
            /**
             * @description Trading pair.
             * @example BTC/USD
             */
            readonly name?: string;
            /**
             * @description URL symbol of trading pair.
             * @example btcusd
             */
            readonly url_symbol?: string;
        };
        Transaction: {
            /**
             * Format: int32
             * @description Number of transactions.
             * @example 1
             */
            readonly count?: number;
            /**
             * Format: int32
             * @description Conversion order ID.
             * @example 1
             */
            readonly order_id?: number;
            /** @description Trades. */
            trades?: components["schemas"]["Trade"][];
        };
        TransactionsResponse: {
            /**
             * @description Amount.
             * @example 0.00676053
             */
            readonly amount?: string;
            /**
             * @description Unix timestamp date and time.
             * @example 1644406050
             */
            readonly date?: string;
            /**
             * @description Price.
             * @example 43524.69
             */
            readonly price?: string;
            /**
             * @description Transaction ID.
             * @example 220744838
             */
            readonly tid?: string;
            /** @description 0 (buy) or 1 (sell). */
            readonly type?: string;
        };
        TransferToFromMainRequest: {
            /**
             * @description Amount.
             * @example 10
             */
            amount: number;
            /**
             * @description Currency.
             * @example BTC
             */
            currency: string;
            /**
             * Format: int32
             * @description The Sub Account unique identifier.
             * @example 990129
             */
            subAccount: number;
        };
        TransferToFromMainResponse: {
            /**
             * @description Additional error information.
             * @example Missing parameters: ["subAccount"].
             */
            readonly reason?: string;
            /**
             * @description "ok" or "error"
             * @example error
             */
            readonly status?: string;
        };
        UserTransactionsRequest: {
            /**
             * @description Limit result to that many transactions (default: 100; maximum: 1000).
             * @example 100
             */
            limit?: string;
            /**
             * @description Skip that many transactions before returning results (default: 0, maximum: 200000). If you need to export older history contact support OR use combination of limit and since_id parameters.
             * @example 0
             */
            offset?: string;
            /**
             * @description (Optional) Show only transactions from specified transaction id. If since_id parameter is used, limit parameter is set to 1000.
             * @example 1
             */
            since_id?: string;
            /**
             * @description (Optional) Show only transactions from unix timestamp (for max 30 days old).
             * @example 1644406050
             */
            since_timestamp?: string;
            /**
             * @description Sorting by date and time: asc - ascending; desc - descending (default: desc).
             * @example desc
             */
            sort?: string;
            /**
             * @description Show only transactions to unix timestamp (for max 30 days old).
             * @example 1644406050
             */
            until_timestamp?: string;
        };
        UserTransactionsResponse: {
            /**
             * @description Date and time.
             * @example 2022-03-01 10:54:53.849000
             */
            readonly datetime?: string;
            /**
             * @description Transaction fee.
             * @example 0.62563
             */
            readonly fee?: string;
            /**
             * Format: int32
             * @description Transaction ID.
             * @example 1
             */
            readonly id?: number;
            /**
             * Format: int32
             * @description Executed order ID.
             * @example 1463489000206336
             */
            readonly order_id?: number;
            /**
             * @description True if transaction is a self trade transaction.
             * @example true
             */
            readonly self_trade?: boolean;
            /**
             * Format: int32
             * @description Order ID of the complementary order of the self trade.
             * @example 1
             */
            readonly self_trade_order_id?: number;
            /**
             * @description Transaction type: 0 - deposit; 1 - withdrawal; 2 - market trade; 14 - sub account transfer; 25 - credited with staked assets; 26 - sent assets to staking; 27 - staking reward; 32 - referral reward; 35 - inter account transfer; 33 - settlement transfer; 58 - derivatives periodic settlement; 59 - insurance fund claim; 60 - insurance fund premium; 61 - collateral liquidation.
             * @example 1
             */
            readonly type?: string;
            /**
             * @description {currency_pair} exchange rate.
             * @example 1
             */
            readonly "{currency_pair}"?: number;
            /**
             * @description {from_currency} amount.
             * @example -1.0
             */
            readonly "{from_currency}"?: string;
            /**
             * @description {to_currency} amount.
             * @example 1.0
             */
            readonly "{to_currency}"?: string;
        };
        VaspSchema: {
            /**
             * @description Name of the VASP
             * @example Bitstamp
             */
            readonly name: string;
            /**
             * Format: uuid
             * @description VASP unique identifier
             * @example 258b8c23-48c0-4916-bba9-0dd47bcdd7cf
             */
            readonly uuid: string;
        };
        WebsocketsTokenResponse: {
            /**
             * @description Token.
             * @example vRQqHEFoxp23seihJnbhPGt0lgBG5EFe
             */
            readonly token?: string;
            /**
             * Format: int32
             * @description User ID.
             * @example 1
             */
            readonly user_id?: number;
            /**
             * Format: int32
             * @description Validity of token in seconds.
             * @example 60
             */
            readonly valid_sec?: number;
        };
        WithdrawalRequestsRequest: {
            /**
             * @description Withdrawal request id.
             * @example 1
             */
            id?: string;
            /**
             * @description Limit result to that many withdrawal requests (minimum: 1; maximum: 1000; default: 1000).
             * @example 10
             */
            limit?: string;
            /**
             * @description Skip that many withdrawal requests before returning results (minimum: 0; maximum: 200000).
             * @example 0
             */
            offset?: string;
            /**
             * @description Withdrawal requests from number of seconds ago to now (max. 50000000).
             * @example 86400
             */
            timedelta?: string;
        };
        WithdrawalRequestsResponse: {
            /**
             * @description Withdrawal address.
             * @example aMDHooGmAkyrsaQiKhAORhSNTmoRzxqWIO
             */
            readonly address?: string;
            /**
             * @description Amount.
             * @example 0.00006000
             */
            readonly amount?: string;
            /**
             * @description Currency.
             * @example BTC
             */
            readonly currency?: string;
            /**
             * Format: date-time
             * @description Date and time.
             * @example 2022-01-31 16:07:32
             */
            readonly datetime?: string;
            /**
             * Format: int32
             * @description Withdrawal ID.
             * @example 1
             */
            readonly id?: number;
            /**
             * @description Cryptocurrency network.
             * @example bitcoin
             * @enum {string}
             */
            readonly network?: "bitcoin-cash" | "bitcoin" | "ethereum" | "litecoin" | "stellar" | "xrpl" | "algorand" | "flare" | "hedera" | "cardano" | "songbird" | "avalanche-c-chain" | "solana" | "polkadot" | "near" | "doge" | "sui" | "casper" | "multiversx" | "internet-computer" | "xdc-network" | "coreum" | "arbitrum-one" | "sei" | "op-mainnet";
            /**
             * Format: int32
             * @description 0 (open), 1 (in process), 2 (finished), 3 (canceled), 4 (failed) or 11 (reversed).
             * @example 2
             */
            readonly status?: number;
            /**
             * @description Transaction ID (crypto withdrawals only).
             * @example NsOeFbQhRnpGzNIThWGBTkQwRJqTNOGPVhYavrVyMfkAyMUmIlUpFIwGTzSvpeOP
             */
            readonly transaction_id?: string;
            /**
             * Format: int32
             * @description Bitstamp's transaction id.
             * @example 1
             */
            readonly txid?: number;
            /**
             * Format: int32
             * @description 0 (SEPA), 2 (WIRE transfer), 17 (BCH), 1 (BTC), 16 (ETH), 15 (LTC), 18 (PAX), 19 (XLM), 14 (XRP), 20 (LINK), 21 (OMG), 22 (USDC), 24 (AAVE), 25 (BAT), 26 (UMA), 27 (DAI), 28 (KNC), 29 (MKR), 30 (ZRX), 31 (GUSD), 32 (ALGO), 33 (AUDIO), 34 (CRV), 35 (SNX), 36 (UNI), 38 (YFI), 39 (COMP), 40 (GRT), 42 (USDT), 43 (EURT), 46 (MATIC), 47 (SUSHI), 48 (CHZ), 49 (ENJ), 50 (HBAR), 51 (ALPHA), 52 (AXS), 53 (FTT), 54 (SAND), 55 (STORJ), 56 (ADA), 57 (FET), 58 (RGT), 59 (SKL), 60 (CEL), 61 (SLP), 62 (SXP), 65 (DYDX), 66 (FTM), 67 (SHIB), 69 (AMP), 71 (GALA), 72 (PERP).
             * @example 0
             */
            readonly type?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetAccountBalances: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountBalancesResponse"][];
                };
            };
        };
    };
    GetAccountBalancesForCurrency: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountBalancesResponse"];
                };
            };
        };
    };
    GetUnconfirmedBTCDeposits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DepositAddressResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OpenInstantBuyOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["BuyInstantOrderRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuySellOrderResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OpenMarketBuyOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["BuySellMarketOrderRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuySellOrderResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OpenLimitBuyOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["BuySellLimitOrderRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuySellOrderResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CancelAllOrders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelAllOrdersResponse"];
                };
            };
        };
    };
    CancelOrdersForMarket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelAllOrdersResponse"];
                };
            };
        };
    };
    CancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["CancelOrderRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelOrderResponse"] | components["schemas"]["SimpleErrorResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    GetCryptoUserTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["CryptoTransactionsRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoTransactionsResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    GetCurrencies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrencySchema"][];
                };
            };
        };
    };
    EarnSubscribe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EarnSubscriptionSchema"];
            };
        };
        responses: {
            /** @description Post operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ForbiddenError | Provided data is invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchema"];
                };
            };
        };
    };
    EarnSubscriptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EarnSubscriptionsSchema"][];
                };
            };
        };
    };
    EarnSubscriptionsSetting: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EarnSubscriptionSettingSchema"];
            };
        };
        responses: {
            /** @description Post operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ForbiddenError | Provided data is invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchema"];
                };
            };
        };
    };
    EarnTransactions: {
        parameters: {
            query?: {
                /** @description Currency */
                currency?: string;
                /** @description Limit result to that many events (default: 100; maximum: 1000) */
                limit?: number;
                /** @description Skip that many events before returning results (default: 0, maximum: 200000) */
                offset?: number;
                /** @description Currency in which value is calculated */
                quote_currency?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EarnTransactionSchema"][];
                };
            };
        };
    };
    EarnUnsubscribe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EarnSubscriptionSchema"];
            };
        };
        responses: {
            /** @description Post operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ForbiddenError | Provided data is invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchema"];
                };
            };
        };
    };
    GetEURUSDConversionRate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EurUsdConversionRateResponse"];
                };
            };
        };
    };
    GetAllTradingFees: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeeTradingResponse"][];
                };
            };
        };
    };
    GetTradingFeesForCurrency: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeeTradingResponse"];
                };
            };
        };
    };
    GetAllWithdrawalFees: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeeWithdrawalResponse"][];
                };
            };
        };
    };
    GetWithdrawalFeeForCurrency: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FeeWithdrawalRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeeWithdrawalResponse"];
                };
            };
        };
    };
    GetLiquidationAddressTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["InstantConvertAddressInfoRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstantConvertAddressInfoResponse"][] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    RequestNewLiquidationAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["NewInstantConvertAddressRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewInstantConvertAddressResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    GetMarkets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MarketSchema"][];
                };
            };
        };
    };
    GetUserTradingMarkets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TradingPair"][];
                };
            };
        };
    };
    GetOHLCData: {
        parameters: {
            query: {
                /** @description Timeframe in seconds. */
                step: 60 | 180 | 300 | 900 | 1800 | 3600 | 7200 | 14400 | 21600 | 43200 | 86400 | 259200;
                /** @description Limit OHLC results. */
                limit: number;
                /** @description Unix timestamp from when OHLC data will be started. */
                start?: number;
                /** @description Unix timestamp to when OHLC data will be shown.If none from start or end timestamps are posted then endpoint returns OHLC data to current unixtime. If both start and end timestamps are posted, end timestamp will be used. */
                end?: number;
                /** @description If set, results won't include current (open) candle. */
                exclude_current_candle?: boolean;
            };
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["OHLCDataResponseSchema"];
                    };
                };
            };
        };
    };
    GetAllOpenOrders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenOrdersAllResponse"][];
                };
            };
        };
    };
    GetOpenOrdersForMarket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenOrdersPairResponse"][];
                };
            };
        };
    };
    GetOrderBook: {
        parameters: {
            query?: {
                /** @description The group parameter is used for accessing different data from order book. Possible values are 0 (orders are not grouped at same price), 1 (orders are grouped at same price - default) or 2 (orders with their order ids are not grouped at same price). */
                group?: number;
            };
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderBookResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    GetOrderStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OrderStatusRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderStatusResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    RevokeAllAPIKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description This endpoint does not expect a request body. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmptySchema"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RevokedAPIKeySchema"];
                };
            };
            /** @description Provided data is invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchema"];
                };
            };
        };
    };
    GetRippleIOUDepositAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RippleIOUDepositAddressResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    RequestRippleIOUWithdrawal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["RippleIOUWithdrawalRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RippleIOUWithdrawalResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OpenInstantSellOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["SellInstantOrderRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuySellOrderResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OpenMarketSellOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["BuySellMarketOrderRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuySellOrderResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OpenLimitSellOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["BuySellLimitOrderRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuySellOrderResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    GetCurrencyPairTickers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TickerWithPairResponse"][];
                };
            };
        };
    };
    GetMarketTicker: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TickerResponse"];
                };
            };
        };
    };
    GetHourlyCurrencyPairTicker: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TickerHourResponse"];
                };
            };
        };
    };
    GetTransactions: {
        parameters: {
            query?: {
                /** @description The time interval from which we want the transactions to be returned. Possible values are minute, hour (default) or day. */
                time?: "day" | "hour" | "minute";
            };
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionsResponse"];
                };
            };
        };
    };
    TransferFromMainToSub: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["TransferToFromMainRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransferToFromMainResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    TransferFromSubToMain: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["TransferToFromMainRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransferToFromMainResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    GetAllContacts: {
        parameters: {
            query?: {
                per_page?: number;
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactSchema"][];
                };
            };
        };
    };
    CreateContact: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ContactSchema"];
            };
        };
        responses: {
            /** @description Post operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactSchema"];
                };
            };
            /** @description Provided data is invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchema"];
                };
            };
        };
    };
    GetContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contact_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactSchema"];
                };
            };
            /** @description NotFoundError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchema"];
                };
            };
        };
    };
    VaspList: {
        parameters: {
            query?: {
                per_page?: number;
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["VaspSchema"][];
                        pagination?: components["schemas"]["PaginationSchema"];
                    };
                };
            };
            /** @description RequestError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchema"];
                };
            };
        };
    };
    GetUserTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["UserTransactionsRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserTransactionsResponse"][] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    GetUserTransactionsForMarket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                market_symbol: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["UserTransactionsRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserTransactionsResponse"][] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    GetWebsocketToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebsocketsTokenResponse"];
                };
            };
        };
    };
    GetWithdrawalRequests: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["WithdrawalRequestsRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WithdrawalRequestsResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CancelWithdrawal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["CancelBankOrCryptoWithdrawalRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelBankWithdrawalResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    RequestFiatWithdrawal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["OpenBankWithdrawalRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenBankWithdrawalResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    GetFiatWithdrawalStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["BankWithdrawalStatusRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankWithdrawalStatusResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    GetCryptoDepositAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DepositAddressRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DepositAddressResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    RequestCryptoWithdrawal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "www-form-urlencoded": components["schemas"]["CryptoWithdrawalRequest"];
            };
        };
        responses: {
            /** @description Post operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CryptoWithdrawalResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
