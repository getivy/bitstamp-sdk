{
  "components": {
    "schemas": {
      "AccountBalancesResponse": {
        "properties": {
          "available": {
            "description": "Available balance for trading.",
            "example": "90.00",
            "format": "decimal",
            "readOnly": true,
            "type": "string"
          },
          "currency": {
            "description": "Currency name.",
            "example": "usd",
            "readOnly": true,
            "type": "string"
          },
          "reserved": {
            "description": "Reserved balance for trading.",
            "example": "10.00",
            "format": "decimal",
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "description": "Total balance on exchange.",
            "example": "100.00",
            "format": "decimal",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BankWithdrawalStatusRequest": {
        "properties": {
          "id": {
            "description": "ID of the withdrawal request.",
            "example": "1",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "BankWithdrawalStatusResponse": {
        "properties": {
          "status": {
            "description": "Status of the withdrawal request.",
            "example": "Waiting to be processed",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuyInstantOrderRequest": {
        "properties": {
          "amount": {
            "description": "Amount in counter currency (Example: For BTC/USD pair, amount is quoted in USD)",
            "example": "100.00",
            "type": "number"
          },
          "client_order_id": {
            "description": "Client order ID set by the client for internal reference. It should be unique, but there are no additional constraints or checks guaranteed on the field by Bitstamp.",
            "example": "123456789",
            "type": "string"
          }
        },
        "required": [
          "amount"
        ],
        "type": "object"
      },
      "BuySellLimitOrderRequest": {
        "properties": {
          "amount": {
            "description": "Amount.",
            "example": "100.00",
            "maximum": 92233720368,
            "minimum": 1e-8,
            "type": "number"
          },
          "price": {
            "description": "Price.",
            "example": "100.00",
            "maximum": 92233720368,
            "minimum": 1e-8,
            "type": "number"
          },
          "limit_price": {
            "description": "If the order gets executed, a new opposite order will be placed, with \"limit_price\" as its price.",
            "example": "100.00",
            "maximum": 92233720368,
            "minimum": 1e-8,
            "type": "number"
          },
          "daily_order": {
            "description": "Opens limit order which will be canceled at 0:00 UTC unless it already has been executed.",
            "example": true,
            "type": "boolean"
          },
          "ioc_order": {
            "description": "An Immediate-Or-Cancel (IOC) order is an order that must be executed immediately. Any portion of an IOC order that cannot be filled immediately will be cancelled.",
            "example": true,
            "type": "boolean"
          },
          "fok_order": {
            "description": "A Fill-Or-Kill (FOK) order is an order that must be executed immediately in its entirety. If the order cannot be immediately executed in its entirety, it will be cancelled.",
            "example": true,
            "type": "boolean"
          },
          "moc_order": {
            "description": "A Maker-Or-Cancel (MOC) order is an order that ensures it is not fully or partially filled when placed. In case it would be, the order is cancelled.",
            "example": true,
            "type": "boolean"
          },
          "gtd_order": {
            "description": "A Good-Till-Date (GTD) lets you select an expiration time up until which the order will be open. Note that all GTD orders are cancelled at 00:00:00 UTC.",
            "example": true,
            "type": "boolean"
          },
          "expire_time": {
            "description": "Unix timestamp in milliseconds. Required in case of GTD order.",
            "example": 1643698764,
            "format": "int32",
            "type": "integer"
          },
          "client_order_id": {
            "description": "Client order ID set by the client for internal reference. It should be unique, but there are no additional constraints or checks guaranteed on the field by Bitstamp.",
            "example": "123456789",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "price"
        ],
        "type": "object"
      },
      "BuySellMarketOrderRequest": {
        "properties": {
          "amount": {
            "description": "Amount in base currency (Example: For BTC/USD pair, amount is quoted in BTC)",
            "example": "100.00",
            "type": "number"
          },
          "client_order_id": {
            "description": "Client order ID set by the client for internal reference. It should be unique, but there are no additional constraints or checks guaranteed on the field by Bitstamp.",
            "example": "123456789",
            "type": "string"
          }
        },
        "required": [
          "amount"
        ],
        "type": "object"
      },
      "BuySellOrderResponse": {
        "properties": {
          "id": {
            "description": "Order ID.",
            "example": "1234123412341234",
            "readOnly": true,
            "type": "string"
          },
          "market": {
            "description": "Market formatted as \"BTC/USD\".",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          },
          "datetime": {
            "description": "Date and time.",
            "example": "2022-01-31 14:43:15.796000",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "0 (buy) or 1 (sell).",
            "example": "0",
            "readOnly": true,
            "type": "string"
          },
          "price": {
            "description": "Price.",
            "example": "2211.00",
            "readOnly": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount.",
            "example": "45.00000000",
            "readOnly": true,
            "type": "string"
          },
          "client_order_id": {
            "description": "Client order ID sent with request. Only returned if parameter was used in request.",
            "example": "123456789",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CancelAllOrdersResponse": {
        "properties": {
          "canceled": {
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "readOnly": true,
            "type": "array"
          },
          "success": {
            "description": "\"true\" if all orders were successfully canceled and \"false\" otherwise",
            "example": true,
            "readOnly": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CancelBankOrCryptoWithdrawalRequest": {
        "properties": {
          "id": {
            "description": "ID of the withdrawal request.",
            "example": "1",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "CancelBankWithdrawalResponse": {
        "properties": {
          "account_currency": {
            "description": "Account currency (balance currency from which the withdrawal was requested) of the cancelled withdrawal request.",
            "example": "EUR",
            "readOnly": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount of the cancelled withdrawal request.",
            "example": 100,
            "readOnly": true,
            "type": "number"
          },
          "currency": {
            "description": "Currency of the cancelled withdrawal request.",
            "example": "EUR",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "ID of the cancelled withdrawal request.",
            "example": "1",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The type of the cancelled withdrawal request.",
            "example": "EU bank transfer (SEPA)",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CancelOrderRequest": {
        "properties": {
          "id": {
            "description": "Order ID.",
            "example": "1234123412341234",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CancelOrderResponse": {
        "properties": {
          "id": {
            "description": "Order ID.",
            "example": 1453282316578816,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "amount": {
            "description": "Order amount.",
            "example": "0.02035278",
            "readOnly": true,
            "type": "number"
          },
          "price": {
            "description": "Order price.",
            "example": "2100.45",
            "readOnly": true,
            "type": "number"
          },
          "type": {
            "description": "Order type.",
            "example": 0,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "market": {
            "description": "Market formatted as \"BTC/USD\".",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContactSchema": {
        "properties": {
          "corporate_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CorporateInfo"
              }
            ],
            "description": "Additional info if the beneficiary is a corporate client",
            "example": {
              "company_name": "Good company"
            }
          },
          "description": {
            "description": "Alias for your internal usage of the contact",
            "example": "",
            "type": "string"
          },
          "id": {
            "description": "Id of the contact",
            "example": "258b8c23-48c0-4916-bba9-0dd47bcdd7cf",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "retail_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetailInfo"
              }
            ],
            "description": "Additional info if the beneficiary is a retail client",
            "example": {
              "first_name": "John",
              "last_name": "Doe"
            }
          }
        },
        "required": [
          "description",
          "id"
        ],
        "type": "object"
      },
      "CorporateInfo": {
        "properties": {
          "address": {
            "type": "string"
          },
          "company_name": {
            "description": "Name of the company",
            "type": "string"
          },
          "country": {
            "description": "ISO 3166-1 alpha 2 country code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CryptoTransaction": {
        "properties": {
          "amount": {
            "description": "Amount.",
            "example": 0.00012,
            "readOnly": true,
            "type": "number"
          },
          "currency": {
            "description": "Currency.",
            "example": "BTC",
            "readOnly": true,
            "type": "string"
          },
          "datetime": {
            "description": "Date and time.",
            "example": 1642665114,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "destinationAddress": {
            "description": "Destination address.",
            "example": "3FiKkjgZ6Sj4RWp3ZsCjYh5Pt7ZCBsL7uF",
            "readOnly": true,
            "type": "string"
          },
          "network": {
            "description": "Cryptocurrency network.",
            "enum": [
              "bitcoin-cash",
              "bitcoin",
              "ethereum",
              "litecoin",
              "stellar",
              "xrpl",
              "algorand",
              "flare",
              "hedera",
              "cardano",
              "songbird",
              "avalanche-c-chain",
              "solana",
              "polkadot",
              "near",
              "doge",
              "sui",
              "casper",
              "multiversx",
              "internet-computer",
              "xdc-network",
              "coreum",
              "arbitrum-one",
              "sei",
              "op-mainnet"
            ],
            "example": "bitcoin",
            "readOnly": true,
            "type": "string"
          },
          "txid": {
            "description": "Transaction hash.",
            "example": "e4123d1d57df4106aaae5ec4d77eb6cd42e226d020a0a2c1c7919d14b932494b",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CryptoTransactionsRequest": {
        "properties": {
          "include_ious": {
            "description": "True - shows also ripple IOU transactions.",
            "example": false,
            "type": "boolean"
          },
          "limit": {
            "description": "Limit result to that many transactions (default: 100; maximum: 1000).",
            "example": 100,
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "Skip that many transactions before returning results (default: 0, maximum: 200000).",
            "example": 0,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CryptoTransactionsResponse": {
        "properties": {
          "deposits": {
            "description": "Deposits.",
            "items": {
              "$ref": "#/components/schemas/CryptoTransaction"
            },
            "type": "array"
          },
          "ripple_iou_transactions": {
            "description": "Ripple IOU transactions.",
            "items": {
              "$ref": "#/components/schemas/CryptoTransaction"
            },
            "type": "array"
          },
          "withdrawals": {
            "description": "Withdrawals.",
            "items": {
              "$ref": "#/components/schemas/CryptoTransaction"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CryptoWithdrawalRequest": {
        "properties": {
          "address": {
            "description": "Cryptocurrency address.",
            "example": "aMDHooGmAkyrsaQiKhAORhSNTmoRzxqWIO",
            "type": "string"
          },
          "amount": {
            "description": "Cryptocurrency amount.",
            "example": "1",
            "type": "number"
          },
          "contact_thirdparty": {
            "description": "If the address you are withdrawing to is in your name (regardless of if this is a hosted or unhosted wallet), this should be set to False. If you are withdrawing to a third party, set it to True",
            "type": "boolean"
          },
          "contact_uuid": {
            "description": "If setting the contact_thirdparty field to True, you need to provide the UUID of the contact from the /v2/travel_rule/contacts/ endpoint",
            "format": "uuid",
            "type": "string"
          },
          "destination_tag": {
            "description": "Address destination tag - applicable to: XRP.",
            "example": "12345",
            "type": "string"
          },
          "memo_id": {
            "description": "Address memo id - applicable to: XLM, HBAR, GYEN, VCHF, VEUR, ZUSD, COREUM, SEI.",
            "example": "12345",
            "type": "string"
          },
          "network": {
            "description": "Cryptocurrency network.",
            "enum": [
              "bitcoin-cash",
              "bitcoin",
              "ethereum",
              "litecoin",
              "stellar",
              "xrpl",
              "algorand",
              "flare",
              "hedera",
              "cardano",
              "songbird",
              "avalanche-c-chain",
              "solana",
              "polkadot",
              "near",
              "doge",
              "sui",
              "casper",
              "multiversx",
              "internet-computer",
              "xdc-network",
              "coreum",
              "arbitrum-one",
              "sei",
              "op-mainnet"
            ],
            "example": "bitcoin",
            "type": "string"
          },
          "transfer_id": {
            "description": "Address transfer id - applicable to: CSPR.",
            "example": 12345,
            "format": "int32",
            "type": "integer"
          },
          "vasp_uuid": {
            "description": "When withdrawing to a hosted wallet by a Virtual Asset Services Provider, provide the UUID from the /v2/travel_rule/vasps/ endpoint",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "address",
          "amount",
          "destination_tag"
        ],
        "type": "object"
      },
      "CryptoWithdrawalResponse": {
        "properties": {
          "id": {
            "description": "Withdrawal ID.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CurrencyNetwork": {
        "properties": {
          "deposit": {
            "example": "Enabled",
            "readOnly": true,
            "type": "string"
          },
          "network": {
            "example": "ethereum",
            "readOnly": true,
            "type": "string"
          },
          "withdrawal": {
            "example": "Enabled",
            "readOnly": true,
            "type": "string"
          },
          "withdrawal_decimals": {
            "example": 8,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "withdrawal_minimum_amount": {
            "example": "0.01",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "network",
          "withdrawal_decimals"
        ],
        "type": "object"
      },
      "CurrencySchema": {
        "properties": {
          "name": {
            "example": "Bitcoin",
            "readOnly": true,
            "type": "string"
          },
          "currency": {
            "example": "BTC",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "crypto",
              "fiat"
            ],
            "example": "crypto",
            "readOnly": true,
            "type": "string"
          },
          "symbol": {
            "example": "₿",
            "readOnly": true,
            "type": "string"
          },
          "decimals": {
            "example": 8,
            "format": "int32",
            "minimum": 2,
            "readOnly": true,
            "type": "integer"
          },
          "logo": {
            "example": "https://assets.bitstamp.net/static/webapp/images/currencies/btc.8f1b1e09e4fa24d3fde4d2a158a6df9a34261bb3.svg",
            "readOnly": true,
            "type": "string"
          },
          "available_supply": {
            "example": "234565.232",
            "readOnly": true,
            "type": "string"
          },
          "deposit": {
            "example": "Enabled",
            "readOnly": true,
            "type": "string"
          },
          "withdrawal": {
            "example": "Enabled",
            "readOnly": true,
            "type": "string"
          },
          "networks": {
            "items": {
              "$ref": "#/components/schemas/CurrencyNetwork"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "available_supply",
          "currency",
          "decimals",
          "name",
          "symbol",
          "type"
        ],
        "type": "object"
      },
      "DepositAddressRequest": {
        "properties": {
          "network": {
            "description": "Cryptocurrency network.",
            "enum": [
              "bitcoin-cash",
              "bitcoin",
              "ethereum",
              "litecoin",
              "stellar",
              "xrpl",
              "algorand",
              "flare",
              "hedera",
              "cardano",
              "songbird",
              "avalanche-c-chain",
              "solana",
              "polkadot",
              "near",
              "doge",
              "sui",
              "casper",
              "multiversx",
              "internet-computer",
              "xdc-network",
              "coreum",
              "arbitrum-one",
              "sei",
              "op-mainnet"
            ],
            "example": "bitcoin",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DepositAddressResponse": {
        "properties": {
          "address": {
            "description": "Address for requested currency.",
            "example": "0x6a56f5b80f04b4fd70d64d72e1396698635e5436",
            "readOnly": true,
            "type": "string"
          },
          "destination_tag": {
            "description": "Destination tag in case of currency XRP or Ripple, otherwise not present.",
            "example": 89473951,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "memo_id": {
            "description": "Memo ID in case of network HBAR or XLM, otherwise not present.",
            "example": "299576079",
            "readOnly": true,
            "type": "string"
          },
          "transfer_id": {
            "description": "Transfer ID in case of network CSPR, otherwise not present.",
            "example": 89473951,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EarnSubscriptionSchema": {
        "properties": {
          "amount": {
            "description": "Amount to subscribe or unsubscribe with.",
            "example": 10,
            "type": "number",
            "writeOnly": true
          },
          "currency": {
            "description": "Currency",
            "example": "ETH",
            "type": "string",
            "writeOnly": true
          },
          "earn_term": {
            "description": "Type of Earn term",
            "enum": [
              "FLEXIBLE",
              "FIXED"
            ],
            "example": "FLEXIBLE",
            "type": "string",
            "writeOnly": true
          },
          "earn_type": {
            "description": "Type of Earn product",
            "enum": [
              "STAKING",
              "LENDING"
            ],
            "example": "STAKING",
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "amount",
          "currency",
          "earn_term",
          "earn_type"
        ],
        "type": "object"
      },
      "EarnSubscriptionSettingSchema": {
        "properties": {
          "currency": {
            "description": "Currency",
            "example": "ALGO",
            "type": "string",
            "writeOnly": true
          },
          "earn_type": {
            "description": "Type of Earn product",
            "enum": [
              "STAKING",
              "LENDING"
            ],
            "example": "STAKING",
            "type": "string",
            "writeOnly": true
          },
          "setting": {
            "description": "Type of setting action.",
            "enum": [
              "OPT_IN",
              "OPT_OUT"
            ],
            "example": "OPT_IN",
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "currency",
          "earn_type",
          "setting"
        ],
        "type": "object"
      },
      "EarnSubscriptionsSchema": {
        "properties": {
          "activation_period": {
            "description": "Expected time until earn option starts to earn rewards",
            "example": "24 hours",
            "readOnly": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount on which you are earning interest",
            "example": 1,
            "readOnly": true,
            "type": "number"
          },
          "amount_earned": {
            "description": "Amount that has been earned",
            "example": 2,
            "readOnly": true,
            "type": "number"
          },
          "available_amount": {
            "description": "Amount on which you are earning interest that is available to withdraw from Earn",
            "example": 1,
            "readOnly": true,
            "type": "number"
          },
          "currency": {
            "description": "Currency",
            "example": "ETH",
            "readOnly": true,
            "type": "string"
          },
          "distribution_period": {
            "description": "Period in which the rewards are distributed",
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY"
            ],
            "example": "DAILY",
            "readOnly": true,
            "type": "string"
          },
          "estimated_annual_yield": {
            "description": "Estimated annual yield",
            "example": 10,
            "readOnly": true,
            "type": "number"
          },
          "minimum_subscription_amount": {
            "description": "Minimum amount for subscription",
            "example": 0,
            "readOnly": true,
            "type": "number"
          },
          "term": {
            "description": "Type of Earn term",
            "enum": [
              "FLEXIBLE",
              "FIXED"
            ],
            "example": "FIXED",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Type of Earn product",
            "enum": [
              "STAKING",
              "LENDING"
            ],
            "example": "LENDING",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EarnTransactionSchema": {
        "properties": {
          "amount": {
            "description": "Amount in base currency",
            "example": 10,
            "readOnly": true,
            "type": "number"
          },
          "currency": {
            "description": "Currency",
            "example": "ETH",
            "readOnly": true,
            "type": "string"
          },
          "datetime": {
            "description": "Date and time of earn history event",
            "example": "2022-01-31 14:43:15.796000",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "quote_currency": {
            "description": "Currency in which value is calculated",
            "example": "USD",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "description": "Status of earn history event",
            "enum": [
              "PENDING",
              "COMPLETED",
              "CANCELED",
              "FAILED"
            ],
            "example": "COMPLETED",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Type of earn history event",
            "enum": [
              "STAKE",
              "UNSTAKE",
              "REWARD_RECEIVED",
              "OPT_IN",
              "OPT_OUT",
              "SUBSCRIBE",
              "UNSUBSCRIBE"
            ],
            "example": "SUBSCRIBE",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "Amount in quote currency",
            "example": 100,
            "readOnly": true,
            "type": "number"
          }
        },
        "type": "object"
      },
      "EmptySchema": {
        "properties": {},
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "reason": {
            "description": "Error reason.",
            "example": "The reason for the error.",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "description": "\"error\"",
            "example": "error",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorSchema": {
        "properties": {
          "code": {
            "type": "string"
          },
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "EurUsdConversionRateResponse": {
        "properties": {
          "buy": {
            "description": "Buy conversion rate.",
            "example": "16.52234567",
            "readOnly": true,
            "type": "string"
          },
          "sell": {
            "description": "Sell conversion rate.",
            "example": "0.06577932",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Fee": {
        "properties": {
          "maker": {
            "description": "Fee for maker of the market.",
            "example": "0.15000",
            "format": "decimal",
            "readOnly": true,
            "type": "string"
          },
          "taker": {
            "description": "Fee for taker of the market.",
            "example": "0.16000",
            "format": "decimal",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeeTradingResponse": {
        "properties": {
          "currency_pair": {
            "description": "Currency pair name (deprecated).",
            "example": "btcusd",
            "readOnly": true,
            "type": "string"
          },
          "fees": {
            "description": "Dictionary of maker and taker fees.",
            "example": [
              {
                "maker": "0.15000",
                "taker": "0.16000"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Fee"
            },
            "type": "array"
          },
          "market": {
            "description": "Market for fees.",
            "example": "btcusd",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeeWithdrawalRequest": {
        "properties": {
          "network": {
            "description": "Cryptocurrency network.",
            "enum": [
              "bitcoin-cash",
              "bitcoin",
              "ethereum",
              "litecoin",
              "stellar",
              "xrpl",
              "algorand",
              "flare",
              "hedera",
              "cardano",
              "songbird",
              "avalanche-c-chain",
              "solana",
              "polkadot",
              "near",
              "doge",
              "sui",
              "casper",
              "multiversx",
              "internet-computer",
              "xdc-network",
              "coreum",
              "arbitrum-one",
              "sei",
              "op-mainnet"
            ],
            "example": "bitcoin",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeeWithdrawalResponse": {
        "properties": {
          "currency": {
            "description": "Currency name.",
            "example": "btc",
            "readOnly": true,
            "type": "string"
          },
          "fee": {
            "description": "Customer withdrawal fee.",
            "example": "0.00015000",
            "format": "decimal",
            "readOnly": true,
            "type": "string"
          },
          "network": {
            "description": "Cryptocurrency network.",
            "enum": [
              "bitcoin-cash",
              "bitcoin",
              "ethereum",
              "litecoin",
              "stellar",
              "xrpl",
              "algorand",
              "flare",
              "hedera",
              "cardano",
              "songbird",
              "avalanche-c-chain",
              "solana",
              "polkadot",
              "near",
              "doge",
              "sui",
              "casper",
              "multiversx",
              "internet-computer",
              "xdc-network",
              "coreum",
              "arbitrum-one",
              "sei",
              "op-mainnet"
            ],
            "example": "bitcoin",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "InstantConvertAddressInfoRequest": {
        "properties": {
          "address": {
            "description": "Shows transactions for specific instant convert address or for all users instant convert addresses.",
            "example": "3MDvHUAg41uJx1511gDotsf4ccKuc9frz1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InstantConvertAddressInfoResponse": {
        "properties": {
          "address": {
            "description": "Address set for automatic conversion",
            "example": "3MDvHUAg41uJx1511gDotsf4ccKuc9frz1",
            "readOnly": true,
            "type": "string"
          },
          "currency_pair": {
            "description": "Currency pair.",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          },
          "transactions": {
            "description": "List of transactions.",
            "example": [
              {
                "count": 1,
                "order_id": 1,
                "trades": [
                  {
                    "btc_amount": "1.0",
                    "exchange_rate": "1.0",
                    "fees": "0.0"
                  }
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MarketSchema": {
        "properties": {
          "name": {
            "description": "Market name.",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          },
          "market_symbol": {
            "description": "Symbol of market (used in url).",
            "example": "btcusd",
            "readOnly": true,
            "type": "string"
          },
          "base_currency": {
            "description": "Market's base currency",
            "example": "BTC",
            "readOnly": true,
            "type": "string"
          },
          "base_decimals": {
            "description": "Decimal precision for base currency (BTC/USD - base: BTC).",
            "example": 8,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "counter_currency": {
            "description": "Market's counter currency",
            "example": "USD",
            "readOnly": true,
            "type": "string"
          },
          "counter_decimals": {
            "description": "Decimal precision for counter currency (BTC/USD - counter: USD).",
            "example": 2,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "minimum_order_value": {
            "description": "Minimum order size in counter currency.",
            "example": "20.0",
            "readOnly": true,
            "type": "string"
          },
          "maximum_order_value": {
            "description": "Maximum order size in counter currency.",
            "example": "200.0",
            "readOnly": true,
            "type": "string"
          },
          "minimum_order_amount": {
            "description": "Minimum order amount in base currency.",
            "example": "0.01",
            "readOnly": true,
            "type": "string"
          },
          "maximum_order_amount": {
            "description": "Maximum order amount in base currency.",
            "example": "10",
            "readOnly": true,
            "type": "string"
          },
          "trading": {
            "description": "Trading engine status (Enabled/Disabled).",
            "enum": [
              "Enabled",
              "Disabled"
            ],
            "example": "Enabled",
            "readOnly": true,
            "type": "string"
          },
          "instant_order_counter_decimals": {
            "description": "Decimal precision for counter currency for instant buy and cash sell orders.",
            "example": 2,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "instant_and_market_orders": {
            "description": "Instant and market orders status (Enabled/Disabled).",
            "enum": [
              "Enabled",
              "Disabled"
            ],
            "example": "Enabled",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Market description.",
            "example": "Bitcoin / U.S. dollar",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "NewInstantConvertAddressRequest": {
        "properties": {
          "address_format": {
            "description": "\tAddress format. Can be either \"P2SHP2WSH\" or \"BECH32\".",
            "example": "P2SHP2WSH",
            "type": "string"
          },
          "liquidation_currency": {
            "description": "Deposited BTCs will be automatically converted to liquidation_currency.",
            "example": "BTC",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NewInstantConvertAddressResponse": {
        "properties": {
          "address": {
            "description": "Address set for automatic conversion.",
            "example": "3MDvHUAg41uJx1511gDotsf4ccKuc9frz1",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OHLCData": {
        "properties": {
          "timestamp": {
            "description": "Unix timestamp date and time.",
            "example": "1643630400",
            "readOnly": true,
            "type": "string"
          },
          "open": {
            "description": "Opening price.",
            "example": "2188.97",
            "readOnly": true,
            "type": "string"
          },
          "high": {
            "description": "Price high.",
            "example": "2211.00",
            "readOnly": true,
            "type": "string"
          },
          "low": {
            "description": "Price low.",
            "example": "2188.97",
            "readOnly": true,
            "type": "string"
          },
          "close": {
            "description": "Closing price.",
            "example": "2188.97",
            "readOnly": true,
            "type": "string"
          },
          "volume": {
            "description": "Volume.",
            "example": "4.01560417",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OHLCDataResponseSchema": {
        "properties": {
          "pair": {
            "description": "Trading pair.",
            "example": "BTC/USD",
            "type": "string"
          },
          "ohlc": {
            "description": "OHLC data.",
            "items": {
              "$ref": "#/components/schemas/OHLCData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OpenBankWithdrawalRequest": {
        "properties": {
          "account_currency": {
            "description": "The balance from which you wish to withdraw. Can be either \"USD\", \"EUR\" or \"GBP\".",
            "example": "USD",
            "type": "string"
          },
          "address": {
            "description": "User or company address.",
            "example": "Street 1",
            "type": "string"
          },
          "amount": {
            "description": "The amount to withdraw.",
            "example": "100.0",
            "type": "string"
          },
          "bank_address": {
            "description": "Target bank address (international withdrawals only).",
            "example": "Street 1",
            "type": "string"
          },
          "bank_city": {
            "description": "Target bank city (international withdrawals only).",
            "example": "City",
            "type": "string"
          },
          "bank_country": {
            "description": "Target bank country. Country codes must be in accordance with the ISO 3166-1 standard (use two character Alpha-2 codes). Disclaimer: Not all country choices listed at this reference URL are supported. For a detailed list please refer to our platform's withdrawal interfaces (international withdrawals only).",
            "example": "SI",
            "type": "string"
          },
          "bank_name": {
            "description": "Target bank name (international withdrawals only).",
            "example": "Bank",
            "type": "string"
          },
          "bank_postal_code": {
            "description": "Target bank postal code (international withdrawals only).",
            "example": "0000",
            "type": "string"
          },
          "bic": {
            "description": "The target bank BIC.",
            "example": "XXXXYY00",
            "type": "string"
          },
          "city": {
            "description": "User or company city.",
            "example": "City",
            "type": "string"
          },
          "comment": {
            "description": "Withdrawal comment.",
            "example": "Comment.",
            "type": "string"
          },
          "country": {
            "description": "User or company country. Country codes must be in accordance with the ISO 3166-1 standard (use two character Alpha-2 codes). Disclaimer: Not all country choices listed at this reference URL are supported. For a detailed list please refer to our platform's withdrawal interfaces.",
            "example": "SI",
            "type": "string"
          },
          "currency": {
            "description": "The currency in which the funds should be withdrawn (may involve conversion fees). Currency codes must be in accordance with the ISO 4217 standard. Disclaimer: Not all currency choices listed at this reference URL are supported. For a detailed list please refer to our platform's withdrawal interfaces. (international withdrawals only)",
            "example": "USD",
            "type": "string"
          },
          "iban": {
            "description": "User or company IBAN.",
            "example": "SI56 0000 0000 0000 000",
            "type": "string"
          },
          "name": {
            "description": "Full user or company name.",
            "example": "John Doe",
            "type": "string"
          },
          "postal_code": {
            "description": "User or company postal code.",
            "example": "0000",
            "type": "string"
          },
          "type": {
            "description": "Type of the withdrawal request (\"sepa\" or \"international\").",
            "example": "international",
            "type": "string"
          }
        },
        "required": [
          "account_currency",
          "address",
          "amount",
          "bic",
          "city",
          "country",
          "iban",
          "name",
          "postal_code",
          "type"
        ],
        "type": "object"
      },
      "OpenBankWithdrawalResponse": {
        "properties": {
          "withdrawal_id": {
            "description": "Withdrawal ID.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OpenOrdersAllResponse": {
        "properties": {
          "id": {
            "description": "Order ID.",
            "example": "1234123412341234",
            "readOnly": true,
            "type": "string"
          },
          "datetime": {
            "description": "Date and time.",
            "example": "2022-01-31 14:43:15",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Order type: 0 - buy; 1 - sell.",
            "example": "0",
            "readOnly": true,
            "type": "string"
          },
          "price": {
            "description": "Price.",
            "example": "100.00",
            "readOnly": true,
            "type": "string"
          },
          "amount": {
            "description": "Remaining amount.",
            "example": "0.50000000",
            "readOnly": true,
            "type": "string"
          },
          "amount_at_create": {
            "description": "Initial amount.",
            "example": "0.50000000",
            "readOnly": true,
            "type": "string"
          },
          "currency_pair": {
            "description": "Currency Pair (deprecated).",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          },
          "market": {
            "description": "Market formatted as \"BTC/USD\".",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          },
          "limit_price": {
            "description": "Limit price. (Only returned if limit order was placed with limit_price parameter.)",
            "example": "110.00",
            "readOnly": true,
            "type": "string"
          },
          "client_order_id": {
            "description": "Client order id. (Only returned if order was placed with client order id parameter.)",
            "example": "1234123412341234",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OpenOrdersPairResponse": {
        "properties": {
          "id": {
            "description": "Order ID.",
            "example": "1234123412341234",
            "readOnly": true,
            "type": "string"
          },
          "datetime": {
            "description": "Date and time.",
            "example": "2022-01-31 14:43:15",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Order type: 0 - buy; 1 - sell.",
            "example": "0",
            "readOnly": true,
            "type": "string"
          },
          "price": {
            "description": "Price.",
            "example": "100.00",
            "readOnly": true,
            "type": "string"
          },
          "amount": {
            "description": "Remaining amount.",
            "example": "0.50000000",
            "readOnly": true,
            "type": "string"
          },
          "amount_at_create": {
            "description": "Initial amount.",
            "example": "0.50000000",
            "readOnly": true,
            "type": "string"
          },
          "market": {
            "description": "Market formatted as \"BTC/USD\".",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          },
          "limit_price": {
            "description": "Limit price. (Only returned if limit order was placed with limit_price parameter.)",
            "example": "110.00",
            "readOnly": true,
            "type": "string"
          },
          "client_order_id": {
            "description": "Client order id. (Only returned if order was placed with client order id parameter.)",
            "example": "1234123412341234",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Order": {
        "properties": {
          "id": {
            "description": "Order ID.",
            "example": 1453282316578816,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "amount": {
            "description": "Order amount.",
            "example": "0.02035278",
            "readOnly": true,
            "type": "number"
          },
          "price": {
            "description": "Order price.",
            "example": "2100.45",
            "readOnly": true,
            "type": "number"
          },
          "type": {
            "description": "Order type.",
            "example": 0,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "currency_pair": {
            "description": "Currency pair formatted as \"BTC/USD\".",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          },
          "market": {
            "description": "Market formatted as \"BTC/USD\".",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderBookResponse": {
        "properties": {
          "asks": {
            "description": "List of sell orders.",
            "example": [
              [
                "9484.34",
                "1.00000000"
              ]
            ],
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "readOnly": true,
            "type": "array"
          },
          "bids": {
            "description": "List of buy orders.",
            "example": [
              [
                "9484.34",
                "1.00000000"
              ]
            ],
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "readOnly": true,
            "type": "array"
          },
          "microtimestamp": {
            "description": "Unix timestamp date and time in microseconds.",
            "example": "1643643584684047",
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "Unix timestamp date and time.",
            "example": "1643643584",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderStatusRequest": {
        "properties": {
          "id": {
            "description": "Order ID.",
            "example": "1234123412341234",
            "type": "string"
          },
          "client_order_id": {
            "description": "(Optional) Client order id. (Can only be used if order was placed with client order id parameter.).",
            "example": "1234123412341234",
            "type": "string"
          },
          "omit_transactions": {
            "description": "(Optional) Omits list of transactions for order ID. Possible value: True",
            "example": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderStatusResponse": {
        "properties": {
          "id": {
            "description": "Order ID.",
            "example": 1458532827766784,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "datetime": {
            "description": "Date and time.",
            "example": "2022-01-31 14:43:15",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Type: 0 - buy; 1 - sell.",
            "example": "0",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "description": "Open, Finished, Expired or Canceled.",
            "example": "Open",
            "readOnly": true,
            "type": "string"
          },
          "market": {
            "description": "Market formatted as \"BTC/USD\".",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/OrderTransaction"
            },
            "readOnly": true,
            "type": "array"
          },
          "amount_remaining": {
            "description": "Amount remaining.",
            "example": "100.00",
            "format": "decimal",
            "readOnly": true,
            "type": "string"
          },
          "client_order_id": {
            "description": "Client order id. (Only returned if order was placed with client order id parameter.).",
            "example": "0.50000000",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderTransaction": {
        "properties": {
          "tid": {
            "description": "Transaction ID.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "price": {
            "description": "Price.",
            "example": "100.00",
            "readOnly": true,
            "type": "string"
          },
          "{from_currency}": {
            "description": "{from_currency} amount.",
            "example": "101.00",
            "readOnly": true,
            "type": "string"
          },
          "{to_currency}": {
            "description": "{to_currency} amount.",
            "example": "1",
            "readOnly": true,
            "type": "string"
          },
          "fee": {
            "description": "Transaction fee.",
            "example": "1.00",
            "readOnly": true,
            "type": "string"
          },
          "datetime": {
            "description": "Date and time.",
            "example": "2022-01-31 14:43:15",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Transaction type: 0 - deposit; 1 - withdrawal; 2 - market trade.",
            "example": 0,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PaginationSchema": {
        "description": "        Pagination schema for response.\n        Args:\n            page: (int) page number\n            size: (int) page full size\n            count:  (int) number of items in current page\n        ",
        "properties": {
          "page": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "size": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "count": {
            "format": "int32",
            "minimum": 0,
            "readOnly": true,
            "type": "integer"
          }
        },
        "title": "Pagination schema",
        "type": "object"
      },
      "RetailInfo": {
        "properties": {
          "city": {
            "type": "string"
          },
          "country": {
            "description": "ISO 3166-1 alpha 2 country code",
            "type": "string"
          },
          "date_of_birth": {
            "format": "date",
            "type": "string"
          },
          "first_name": {
            "description": "First name of the contact",
            "minLength": 1,
            "pattern": "\\S",
            "type": "string"
          },
          "last_name": {
            "description": "Last name of the contact",
            "minLength": 1,
            "pattern": "\\S",
            "type": "string"
          },
          "street_and_house_number": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "last_name"
        ],
        "type": "object"
      },
      "RevokedAPIKeySchema": {
        "properties": {
          "revoked_api_keys": {
            "description": "API keys that were revoked.",
            "example": [
              "rkBWB2SMjCyU4lJKQvjRNwszMr11kSRU",
              "beXTolq77X3GU70rpmBNjwNrvazuHYx8",
              "ltIGEkaqvb79wdRuJk1RLa2MrLdSJMlC"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RippleIOUDepositAddressResponse": {
        "properties": {
          "address": {
            "description": "Ripple address.",
            "example": "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B",
            "readOnly": true,
            "type": "string"
          },
          "destination_tag": {
            "description": "Destination tag.",
            "example": 89473951,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RippleIOUWithdrawalRequest": {
        "properties": {
          "address": {
            "description": "Ripple address.",
            "example": "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B",
            "type": "string"
          },
          "amount": {
            "description": "Currency amount.",
            "example": "123",
            "type": "number"
          },
          "contact_thirdparty": {
            "description": "If the address you are withdrawing to is in your name (regardless of if this is a hosted or unhosted wallet), this should be set to False. If you are withdrawing to a third party, set it to True",
            "type": "boolean"
          },
          "contact_uuid": {
            "description": "If setting the contact_thirdparty field to True, you need to provide the UUID of the contact from the /v2/travel_rule/contacts/ endpoint",
            "format": "uuid",
            "type": "string"
          },
          "currency": {
            "description": "Currency to withdraw.",
            "example": "USD",
            "type": "string"
          },
          "vasp_uuid": {
            "description": "When withdrawing to a hosted wallet by a Virtual Asset Services Provider, provide the UUID from the /v2/travel_rule/vasps/ endpoint",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "address",
          "amount",
          "currency"
        ],
        "type": "object"
      },
      "RippleIOUWithdrawalResponse": {
        "properties": {
          "id": {
            "description": "Withdrawal ID.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SellInstantOrderRequest": {
        "properties": {
          "amount": {
            "description": "Amount in base currency (Example: For BTC/USD pair, amount is quoted in BTC)",
            "example": "100.00",
            "type": "number"
          },
          "amount_in_counter": {
            "description": "(Optional) Instant sell orders allow you to sell an amount of the base currency determined by the value of it in the counter-currency. Amount_in_counter sets the amount parameter to refer to the counter currency instead of the base currency of the selected trading pair. Possible value: True",
            "example": false,
            "type": "boolean"
          },
          "client_order_id": {
            "description": "Client order ID set by the client for internal reference. It should be unique, but there are no additional constraints or checks guaranteed on the field by Bitstamp.",
            "example": "123456789",
            "type": "string"
          }
        },
        "required": [
          "amount"
        ],
        "type": "object"
      },
      "SimpleErrorResponse": {
        "properties": {
          "error": {
            "description": "The reason for the error.",
            "example": "The reason for the error.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TickerHourResponse": {
        "properties": {
          "ask": {
            "description": "Lowest sell order.",
            "example": "43521.92",
            "readOnly": true,
            "type": "string"
          },
          "bid": {
            "description": "Highest buy order.",
            "example": "43499.58",
            "readOnly": true,
            "type": "string"
          },
          "high": {
            "description": "Last hour price high.",
            "example": "43701.83",
            "readOnly": true,
            "type": "string"
          },
          "last": {
            "description": "Last price.",
            "example": "43505.90",
            "readOnly": true,
            "type": "string"
          },
          "low": {
            "description": "Last hour price low.",
            "example": "43416.85",
            "readOnly": true,
            "type": "string"
          },
          "open": {
            "description": "First price of the hour.",
            "example": "43640.06",
            "readOnly": true,
            "type": "string"
          },
          "side": {
            "description": "Ticker side: 0 - buy; 1 - sell.",
            "example": "0",
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "Unix timestamp date and time.",
            "example": "1644405321",
            "readOnly": true,
            "type": "string"
          },
          "volume": {
            "description": "Last hour volume.",
            "example": "26.24890063",
            "readOnly": true,
            "type": "string"
          },
          "vwap": {
            "description": "Last hour volume weighted average price.",
            "example": "43578.11",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TickerResponse": {
        "properties": {
          "ask": {
            "description": "Lowest sell order.",
            "example": "2211.00",
            "readOnly": true,
            "type": "string"
          },
          "bid": {
            "description": "Highest buy order.",
            "example": "2188.97",
            "readOnly": true,
            "type": "string"
          },
          "high": {
            "description": "Last 24 hours price high.",
            "example": "2811.00",
            "readOnly": true,
            "type": "string"
          },
          "last": {
            "description": "Last price.",
            "example": "2211.00",
            "readOnly": true,
            "type": "string"
          },
          "low": {
            "description": "Last 24 hours price low.",
            "example": "2188.97",
            "readOnly": true,
            "type": "string"
          },
          "open": {
            "description": "First price of the day.",
            "example": "2211.00",
            "readOnly": true,
            "type": "string"
          },
          "open_24": {
            "description": "24 hours time delta transaction price",
            "example": "2211.00",
            "readOnly": true,
            "type": "string"
          },
          "percent_change_24": {
            "description": "24 hours price change percent",
            "example": "13.57",
            "readOnly": true,
            "type": "string"
          },
          "side": {
            "description": "Ticker side: 0 - buy; 1 - sell.",
            "example": "0",
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "Unix timestamp date and time.",
            "example": "1643640186",
            "readOnly": true,
            "type": "string"
          },
          "volume": {
            "description": "Last 24 hours volume.",
            "example": "213.26801100",
            "readOnly": true,
            "type": "string"
          },
          "vwap": {
            "description": "Last 24 hours volume weighted average price.",
            "example": "2189.80",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TickerWithPairResponse": {
        "properties": {
          "ask": {
            "description": "Lowest sell order.",
            "example": "2211.00",
            "readOnly": true,
            "type": "string"
          },
          "bid": {
            "description": "Highest buy order.",
            "example": "2188.97",
            "readOnly": true,
            "type": "string"
          },
          "high": {
            "description": "Last 24 hours price high.",
            "example": "2811.00",
            "readOnly": true,
            "type": "string"
          },
          "last": {
            "description": "Last price.",
            "example": "2211.00",
            "readOnly": true,
            "type": "string"
          },
          "low": {
            "description": "Last 24 hours price low.",
            "example": "2188.97",
            "readOnly": true,
            "type": "string"
          },
          "open": {
            "description": "First price of the day.",
            "example": "2211.00",
            "readOnly": true,
            "type": "string"
          },
          "open_24": {
            "description": "24 hours time delta transaction price",
            "example": "2211.00",
            "readOnly": true,
            "type": "string"
          },
          "pair": {
            "description": "Currency pair name",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          },
          "percent_change_24": {
            "description": "24 hours price change percent",
            "example": "13.57",
            "readOnly": true,
            "type": "string"
          },
          "side": {
            "description": "Ticker side: 0 - buy; 1 - sell.",
            "example": "0",
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "Unix timestamp date and time.",
            "example": "1643640186",
            "readOnly": true,
            "type": "string"
          },
          "volume": {
            "description": "Last 24 hours volume.",
            "example": "213.26801100",
            "readOnly": true,
            "type": "string"
          },
          "vwap": {
            "description": "Last 24 hours volume weighted average price.",
            "example": "2189.80",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Trade": {
        "properties": {
          "btc_amount": {
            "description": "BTC amount.",
            "example": "1.0",
            "readOnly": true,
            "type": "string"
          },
          "exchange_rate": {
            "description": "Exchange rate.",
            "example": "1.0",
            "readOnly": true,
            "type": "string"
          },
          "fees": {
            "description": "Fees.",
            "example": "0.0",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TradingPair": {
        "properties": {
          "name": {
            "description": "Trading pair.",
            "example": "BTC/USD",
            "readOnly": true,
            "type": "string"
          },
          "url_symbol": {
            "description": "URL symbol of trading pair.",
            "example": "btcusd",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Transaction": {
        "properties": {
          "count": {
            "description": "Number of transactions.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "order_id": {
            "description": "Conversion order ID.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "trades": {
            "description": "Trades.",
            "items": {
              "$ref": "#/components/schemas/Trade"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TransactionsResponse": {
        "properties": {
          "amount": {
            "description": "Amount.",
            "example": "0.00676053",
            "readOnly": true,
            "type": "string"
          },
          "date": {
            "description": "Unix timestamp date and time.",
            "example": "1644406050",
            "readOnly": true,
            "type": "string"
          },
          "price": {
            "description": "Price.",
            "example": "43524.69",
            "readOnly": true,
            "type": "string"
          },
          "tid": {
            "description": "Transaction ID.",
            "example": "220744838",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "0 (buy) or 1 (sell).",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransferToFromMainRequest": {
        "properties": {
          "amount": {
            "description": "Amount.",
            "example": "10",
            "type": "number"
          },
          "currency": {
            "description": "Currency.",
            "example": "BTC",
            "type": "string"
          },
          "subAccount": {
            "description": "The Sub Account unique identifier.",
            "example": "990129",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "amount",
          "currency",
          "subAccount"
        ],
        "type": "object"
      },
      "TransferToFromMainResponse": {
        "properties": {
          "reason": {
            "description": "Additional error information.",
            "example": "Missing parameters: [\"subAccount\"].",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "description": "\"ok\" or \"error\"",
            "example": "error",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserTransactionsRequest": {
        "properties": {
          "limit": {
            "description": "Limit result to that many transactions (default: 100; maximum: 1000).",
            "example": "100",
            "type": "string"
          },
          "offset": {
            "description": "Skip that many transactions before returning results (default: 0, maximum: 200000). If you need to export older history contact support OR use combination of limit and since_id parameters.",
            "example": "0",
            "type": "string"
          },
          "since_id": {
            "description": "(Optional) Show only transactions from specified transaction id. If since_id parameter is used, limit parameter is set to 1000.",
            "example": "1",
            "type": "string"
          },
          "since_timestamp": {
            "description": "(Optional) Show only transactions from unix timestamp (for max 30 days old).",
            "example": "1644406050",
            "type": "string"
          },
          "sort": {
            "description": "Sorting by date and time: asc - ascending; desc - descending (default: desc).",
            "example": "desc",
            "type": "string"
          },
          "until_timestamp": {
            "description": "Show only transactions to unix timestamp (for max 30 days old).",
            "example": "1644406050",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserTransactionsResponse": {
        "properties": {
          "datetime": {
            "description": "Date and time.",
            "example": "2022-03-01 10:54:53.849000",
            "readOnly": true,
            "type": "string"
          },
          "fee": {
            "description": "Transaction fee.",
            "example": "0.62563",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Transaction ID.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "order_id": {
            "description": "Executed order ID.",
            "example": 1463489000206336,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "self_trade": {
            "description": "True if transaction is a self trade transaction.",
            "example": true,
            "readOnly": true,
            "type": "boolean"
          },
          "self_trade_order_id": {
            "description": "Order ID of the complementary order of the self trade.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "type": {
            "description": "Transaction type: 0 - deposit; 1 - withdrawal; 2 - market trade; 14 - sub account transfer; 25 - credited with staked assets; 26 - sent assets to staking; 27 - staking reward; 32 - referral reward; 35 - inter account transfer; 33 - settlement transfer; 58 - derivatives periodic settlement; 59 - insurance fund claim; 60 - insurance fund premium; 61 - collateral liquidation.",
            "example": "1",
            "readOnly": true,
            "type": "string"
          },
          "{currency_pair}": {
            "description": "{currency_pair} exchange rate.",
            "example": 1,
            "readOnly": true,
            "type": "number"
          },
          "{from_currency}": {
            "description": "{from_currency} amount.",
            "example": "-1.0",
            "readOnly": true,
            "type": "string"
          },
          "{to_currency}": {
            "description": "{to_currency} amount.",
            "example": "1.0",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VaspSchema": {
        "properties": {
          "name": {
            "description": "Name of the VASP",
            "example": "Bitstamp",
            "readOnly": true,
            "type": "string"
          },
          "uuid": {
            "description": "VASP unique identifier",
            "example": "258b8c23-48c0-4916-bba9-0dd47bcdd7cf",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "uuid"
        ],
        "type": "object"
      },
      "WebsocketsTokenResponse": {
        "properties": {
          "token": {
            "description": "Token.",
            "example": "vRQqHEFoxp23seihJnbhPGt0lgBG5EFe",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "description": "User ID.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "valid_sec": {
            "description": "Validity of token in seconds.",
            "example": 60,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WithdrawalRequestsRequest": {
        "properties": {
          "id": {
            "description": "Withdrawal request id.",
            "example": "1",
            "type": "string"
          },
          "limit": {
            "description": "Limit result to that many withdrawal requests (minimum: 1; maximum: 1000; default: 1000).",
            "example": "10",
            "type": "string"
          },
          "offset": {
            "description": "Skip that many withdrawal requests before returning results (minimum: 0; maximum: 200000).",
            "example": "0",
            "type": "string"
          },
          "timedelta": {
            "description": "Withdrawal requests from number of seconds ago to now (max. 50000000).",
            "example": "86400",
            "maxLength": 10,
            "type": "string"
          }
        },
        "type": "object"
      },
      "WithdrawalRequestsResponse": {
        "properties": {
          "address": {
            "description": "Withdrawal address.",
            "example": "aMDHooGmAkyrsaQiKhAORhSNTmoRzxqWIO",
            "readOnly": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount.",
            "example": "0.00006000",
            "readOnly": true,
            "type": "string"
          },
          "currency": {
            "description": "Currency.",
            "example": "BTC",
            "readOnly": true,
            "type": "string"
          },
          "datetime": {
            "description": "Date and time.",
            "example": "2022-01-31 16:07:32",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Withdrawal ID.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "network": {
            "description": "Cryptocurrency network.",
            "enum": [
              "bitcoin-cash",
              "bitcoin",
              "ethereum",
              "litecoin",
              "stellar",
              "xrpl",
              "algorand",
              "flare",
              "hedera",
              "cardano",
              "songbird",
              "avalanche-c-chain",
              "solana",
              "polkadot",
              "near",
              "doge",
              "sui",
              "casper",
              "multiversx",
              "internet-computer",
              "xdc-network",
              "coreum",
              "arbitrum-one",
              "sei",
              "op-mainnet"
            ],
            "example": "bitcoin",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "description": "0 (open), 1 (in process), 2 (finished), 3 (canceled), 4 (failed) or 11 (reversed).",
            "example": 2,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "transaction_id": {
            "description": "Transaction ID (crypto withdrawals only).",
            "example": "NsOeFbQhRnpGzNIThWGBTkQwRJqTNOGPVhYavrVyMfkAyMUmIlUpFIwGTzSvpeOP",
            "readOnly": true,
            "type": "string"
          },
          "txid": {
            "description": "Bitstamp's transaction id.",
            "example": 1,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "type": {
            "description": "0 (SEPA), 2 (WIRE transfer), 17 (BCH), 1 (BTC), 16 (ETH), 15 (LTC), 18 (PAX), 19 (XLM), 14 (XRP), 20 (LINK), 21 (OMG), 22 (USDC), 24 (AAVE), 25 (BAT), 26 (UMA), 27 (DAI), 28 (KNC), 29 (MKR), 30 (ZRX), 31 (GUSD), 32 (ALGO), 33 (AUDIO), 34 (CRV), 35 (SNX), 36 (UNI), 38 (YFI), 39 (COMP), 40 (GRT), 42 (USDT), 43 (EURT), 46 (MATIC), 47 (SUSHI), 48 (CHZ), 49 (ENJ), 50 (HBAR), 51 (ALPHA), 52 (AXS), 53 (FTT), 54 (SAND), 55 (STORJ), 56 (ADA), 57 (FET), 58 (RGT), 59 (SKL), 60 (CEL), 61 (SLP), 62 (SXP), 65 (DYDX), 66 (FTM), 67 (SHIB), 69 (AMP), 71 (GALA), 72 (PERP).",
            "example": 0,
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "x_auth": {
        "description": "**Format:** `BITSTAMP {api_key}`",
        "in": "header",
        "name": "X-Auth",
        "type": "apiKey"
      },
      "x_auth_nonce": {
        "description": "\nClient generated random nonce:\n\n- lowercase,\n\n- 36 char string,\n\n- each nonce can be used only once within a timeframe of 150 seconds.",
        "in": "header",
        "name": "X-Auth-Nonce",
        "type": "apiKey"
      },
      "x_auth_signature": {
        "description": "\n```sha256.hmac({string_to_sign}, {api_secret})```\n\n```{string_to_sign}``` is your signature message.\n\nContent-Type should not be added to the string if request.body is empty.\n\nThe following have to be combined into a single string:\n\n```\n\"BITSTAMP\" + \" \" + api_key + \nHTTP Verb + \nurl.host + \nurl.path + \nurl.query + \nContent-Type + \nX-Auth-Nonce + \nX-Auth-Timestamp + \nX-Auth-Version + \nrequest.body\n```",
        "in": "header",
        "name": "X-Auth-Signature",
        "type": "apiKey"
      },
      "x_auth_subaccount_id": {
        "description": "Make requests for specific sub account. Set this header to the sub account Unique ID.",
        "in": "header",
        "name": "X-Auth-Subaccount-Id",
        "type": "apiKey"
      },
      "x_auth_timestamp": {
        "description": "\nRequest departure timestamp UTC in milliseconds.\n\nIf timestamp is more than 150 seconds from current server time, it will not allow to make the request.",
        "in": "header",
        "name": "X-Auth-Timestamp",
        "type": "apiKey"
      },
      "x_auth_version": {
        "description": "**Format:** `v2`",
        "in": "header",
        "name": "X-Auth-Version",
        "type": "apiKey"
      },
      "x_content_type": {
        "description": "Please note that you you should not set Content-Type header if there is no body.",
        "in": "header",
        "name": "Content-Type",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "contact": {
      "email": "support@bitstamp.net"
    },
    "description": "# What is API?\nBitstamp application programming interface (API) allows our clients to access and control their accounts, using custom\nwritten software.\n\n# Response codes\nResponse code is a key that can be appended to an API response as **response_code** (string). Additionally, also\nexplanation may or may not be included as the **response_explanation** (string) key, which defines further explanation\nto what has gone wrong when processing a request.\n\nBelow is the list of all available response codes and it's explanations:\n| response_code | response_explanation (optional) |\n| ----------- | ----------- |\n| 400.001 | Unknown validation error. |\n| 400.002 | Request rejected due to exceeded rate limit. |\n| 400.003 | Trading for provided market is disabled. |\n| 400.004 | POST parameter(s) is missing from request. |\n| 400.005 | POST parameter(s) is missing from request: amount. |\n| 400.006 | POST parameter(s) is missing from request: price. |\n| 400.007 | POST parameter(s) is malformed. |\n| 400.008 | POST parameter(s) is malformed: client_order_id. |\n| 400.009 | Insufficient balance for provided user. |\n| 400.010 | POST parameter(s) is malformed: offset. |\n| 400.011 | POST parameter(s) is malformed: limit. |\n| 400.012 | POST parameter(s) is malformed: sort. |\n| 400.013 | POST parameter(s) is malformed: since_timestamp. |\n| 400.014 | POST parameter(s) is missing from request: order_id. |\n| 400.015 | POST parameter(s) is missing from request: client_order_id. |\n| 400.016 | POST parameter(s) is malformed: order_id. |\n| 400.017 | POST parameter(s) is malformed: client_cancel_id. |\n| 400.018 | GET parameters not allowed for this request. |\n| 400.019 | Provided client_order_id already exists. |\n| 400.020 | Provided order size is lower than minimum order value. |\n| 400.021 | Provided price is out of range. |\n| 400.022 | POST parameter(s) is missing from request: expire_time. |\n| 400.023 | POST parameter(s) is malformed: expire_time. |\n| 400.024 | Only one of optional parameters can be set. |\n| 400.025 | Both limit_price and any optional parameter cannot be set. |\n| 400.026 | POST parameter(s) is malformed: amount. |\n| 400.027 | Sell if executed price must be higher than buy price. |\n| 400.028 | Buy if executed price must be lower than sell price. |\n| 400.029 | 'stop_order_id' is None. |\n| 400.030 | 'stop_order_price' is None. |\n| 400.031 | 'expire_time' is None. |\n| 400.032 | 'expire_time' must be set in future date. |\n| 400.033 | 'expire_time' must be None. |\n| 400.034 | POST parameter(s) is malformed: until_timestamp. |\n| 400.035 | POST parameter(s) is missing from request: id. |\n| 400.036 | POST parameter(s) is malformed: id. |\n| 400.037 | Provided order size is too large. |\n| 400.038 | Provided order amount is too large. |\n| 400.039 | Provided order size is higher than maximum order value. |\n| 400.040 | Provided leverage differs from ones on open orders. |\n| 400.041 | POST parameter(s) is malformed: price. |\n| 400.042 | Position management mode already active |\n| 400.043 | No positions present |\n| 400.044 | POST parameter(s) is malformed: leverage. |\n| 400.045 | Open orders present. |\n| 400.046 | Provided order amount is too low. |\n| 400.047 | POST parameter(s) is malformed: stop_price. |\n| 400.048 | POST parameter(s) is malformed: activation_price. |\n| 400.049 | POST parameter(s) is missing: subtype. |\n| 400.050 | POST parameter(s) is missing: trigger. |\n| 400.051 | POST parameter(s) is missing: reduce_only. |\n| 400.052 | Too many stop orders on market. |\n| 400.053 | Too many trailing stop orders on trade account. |\n| 400.054 | Invalid value for trailing_delta. |\n| 400.055 | Current price is lower than order price. |\n| 400.056 | Current price is higher than order price. |\n| 400.057 | Reduce only not supported with provided order parameters. |\n| 400.058 | Only GTC, FOK and IOC time in force allowed for take profit and stop loss orders. |\n| 400.059 | Either stop price or trailing price with trailing delta must be specified. |\n| 400.060 | Trailing delta is required for activation price. |\n| 403.001 | User verification failed. |\n| 403.002 | Trading is not allowed on lending account. |\n| 403.003 | Trading is not allowed on collateral account. |\n| 403.004 | Trading is blocked for user. |\n| 403.005 | Action not allowed at cross margin mode. |\n| 403.006 | Trading of this market type is not allowed on trade account. |\n| 404.001 | Unknown not found error. |\n| 404.002 | Order not found for corresponding request. |\n| 404.003 | Currency pair not found for corresponding request. |\n| 404.004 | Trade account not found for provided API key. |\n| 404.005 | Order book not found. |\n| 404.006 | Currency not found for corresponding request. |\n| 404.007 | Market not found for corresponding request. |\n| 405.001 | GET method not allowed. |\n| 410.001 | Requested endpoint is deprecated. |\n| 500.001 | Unknown server error. |\n| 500.002 | One of Bitstamp internal services failed to process request. |\n| 500.003 | Unknown error while processing order. |\n| 500.004 | No sell orders for provided market. |\n| 500.005 | No buy orders for provided market. |\n| 500.006 | Cash sell order types are currently disabled. |\n| 500.007 | Error while serializing data. |\n| 500.008 | Margin option for provided market is disabled. |\n| 500.009 | Order book is currently unavailable. |\n| 500.010 | Instant trading for provided market is disabled. |\n| 500.011 | Market trading for provided market is disabled. |\n| 500.012 | Matching blocked for this order book. |\n| 500.013 | Unknown matching engine error. |\n| 500.014 | Cash order for provided market is disabled. |\n| 500.015 | Cannot place order. There are currently no orders for provided market. |\n| 500.016 | Your request timed out before order confirmation. Please check order status with id in \"order_id\" field. |\n| 500.017 | Order rejected by matching engine. |\n| 500.018 | No orders for provided market. |\n| 500.019 | Error at canceling orders |\n| 500.020 | Pre reserved orders present |\n| 500.021 | Post reserved orders present |\n| 500.022 | More than one position present |\n| 500.023 | Position management order not filled |\n\n# Request limits\nAs standard, all clients can make 400 requests per second. There is a default limit threshold of 10,000 requests per 10\nminutes in place. The rate limits mentioned above can be increased upon request and the client entering a bespoke\nagreement with Bitstamp. For real time data please refer to the\n[**websocket API**](https://www.bitstamp.net/websocket/v2/).\n\n## Commercial Use of Bitstamp's Exchange Data\nCompanies seeking to utilize Bitstamp's exchange data for their own commercial purposes are directed to contact\npartners@bitstamp.net to receive and sign a commercial use Data License Agreement.\n\nBitstamp allows the incorporation and redistribution of our exchange data for commercial purposes.\nThis includes the right to create ratios, calculations, new original works, statistics, and similar, based on the\nexchange data.\n\n# Authentication\n\nAll private API calls require authentication. For a successful authentication you need to provide the following\nauthorization headers in your request:\n\n## Possible authentication errors\n<table>\n<thead><th>Code</th><th>Reason</th><th>Action</th></thead>\n<tbody>\n<tr><td><strong>API0001</strong></td><td>API key not found</td><td>Check your API key value.</td></tr>\n<tr><td><strong>API0002</strong></td><td>IP address not allowed</td><td>This IP address has no permission to use this API key.</td></tr>\n<tr><td><strong>API0003</strong></td><td>No permission found</td><td>API key doesn't have permission for calling this api endpoint.</td></tr>\n<tr><td><strong>API0004</strong></td><td>Invalid nonce</td><td>Check your nonce value. It must be different than last nonce used in the last 150 seconds.</td></tr>\n<tr><td><strong>API0005</strong></td><td>Invalid signature</td><td>Posted signature doesn't match with ours.</td></tr>\n<tr><td><strong>API0006</strong></td><td>Your account is frozen</td><td>Contact support to unfreeze your account.</td></tr>\n<tr><td><strong>API0008</strong></td><td>Authentication failed</td><td>Can't find customer with selected API key.</td></tr>\n<tr><td><strong>API0009</strong></td><td>Please update your profile with your FATCA information, before using API.</td><td>Check that you filled out the FATCA information form on your account.</td></tr>\n<tr><td><strong>API0010</strong></td><td>Invalid version</td><td>Check that you send \"v2\" in the version authorization header.</td></tr>\n<tr><td><strong>API0011</strong></td><td>Wrong API key format</td><td>Check that your API key string is correct.</td></tr>\n<tr><td><strong>API0012</strong></td><td>X-Auth header is required</td><td>X-Auth header is probably missing in your request.</td></tr>\n<tr><td><strong>API0013</strong></td><td>X-Auth-Signature header is required</td><td>X-Auth-Signature header is probably missing in your request.</td></tr>\n<tr><td><strong>API0014</strong></td><td>X-Auth-Nonce header is required</td><td>X-Auth-Nonce header is probably missing in your request.</td></tr>\n<tr><td><strong>API0015</strong></td><td>X-Auth-Timestamp header is required</td><td>X-Auth-Timestamp header is probably missing in your request.</td></tr>\n<tr><td><strong>API0016</strong></td><td>X-Auth-Version header is required</td><td>X-Auth-Version header is probably missing in your request.</td></tr>\n<tr><td><strong>API0017</strong></td><td>X-Auth-Timestamp header is out of boundaries</td><td>Timestamp you added in the header is either too old or too new. Check that timestamp is within 150 second timeframe.</td></tr>\n<tr><td><strong>API0018</strong></td><td>X-Auth-Timestamp header is invalid</td><td>Check the format of X-Auth-Timestamp header.</td></tr>\n<tr><td><strong>API0019</strong></td><td>Content-Type header is not accepted</td><td>Please specify the correct content type.</td></tr>\n<tr><td><strong>API0020</strong></td><td>Content-Type header should not be present</td><td>Please make sure you're not sending any body in the request.</td></tr>\n<tr><td><strong>API0021</strong></td><td>Please make sure url query string is not too long</td><td>Please make sure the total length of the url does not exceed 2000 characters.</td></tr>\n</tbody>\n</table>\n<SecurityDefinitions />\n\n## Authentication examples\n**Note:** if the request body is empty, the Content-Type header has to be removed both from the headers and from the\nsignature\n\n<div class=\"api__code mb48\">\n    <div class=\"api__code-header\">\n        <span>Python</span>\n        <span class=\"icon icon--code\"></span>\n    </div>\n\n```python\nimport hashlib\nimport hmac\nimport time\nimport requests\nimport uuid\nimport sys\nfrom urllib.parse import urlencode\n\napi_key = 'api_key'\nAPI_SECRET = b'api_key_secret'\n\ntimestamp = str(int(round(time.time() * 1000)))\nnonce = str(uuid.uuid4())\ncontent_type = 'application/x-www-form-urlencoded'\npayload = {'offset': '1'}\n\npayload_string = urlencode(payload)\n\n# '' (empty string) in message represents any query parameters or an empty string in case there are none\nmessage = 'BITSTAMP ' + api_key + \\\n    'POST' + \\\n    'www.bitstamp.net' + \\\n    '/api/v2/user_transactions/' + \\\n    '' + \\\n    content_type + \\\n    nonce + \\\n    timestamp + \\\n    'v2' + \\\n    payload_string\nmessage = message.encode('utf-8')\nsignature = hmac.new(API_SECRET, msg=message, digestmod=hashlib.sha256).hexdigest()\nheaders = {\n    'X-Auth': 'BITSTAMP ' + api_key,\n    'X-Auth-Signature': signature,\n    'X-Auth-Nonce': nonce,\n    'X-Auth-Timestamp': timestamp,\n    'X-Auth-Version': 'v2',\n    'Content-Type': content_type\n}\nr = requests.post(\n    'https://www.bitstamp.net/api/v2/user_transactions/',\n    headers=headers,\n    data=payload_string\n    )\nif not r.status_code == 200:\n    raise Exception('Status code not 200')\n\nstring_to_sign = (nonce + timestamp + r.headers.get('Content-Type')).encode('utf-8') + r.content\nsignature_check = hmac.new(API_SECRET, msg=string_to_sign, digestmod=hashlib.sha256).hexdigest()\nif not r.headers.get('X-Server-Auth-Signature') == signature_check:\n    raise Exception('Signatures do not match')\n\nprint(r.content)\n\n\n```\n\n</div>\n<div class=\"api__code mb48\">\n    <div class=\"api__code-header\">\n        <span>Java</span>\n        <span class=\"icon icon--code\"></span>\n    </div>\n\n```java\npackage com.example.AuthenticationExample;\n\nimport org.apache.commons.codec.binary.Hex;\n\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.UUID;\n\npublic class Authentication {\n    public static void main(String[] args) {\n        String apiKey = String.format(\"%s %s\", \"BITSTAMP\", \"api_key\");\n        String apiKeySecret = \"api_key_secret\";\n        String httpVerb = \"POST\";\n        String urlHost = \"www.bitstamp.net\";\n        String urlPath = \"/api/v2/user_transactions/\";\n        String urlQuery = \"\";\n        String timestamp = String.valueOf(System.currentTimeMillis());\n        String nonce = UUID.randomUUID().toString();\n        String contentType = \"application/x-www-form-urlencoded\";\n        String version = \"v2\";\n        String payloadString = \"offset=1\";\n        String signature = apiKey +\n            httpVerb +\n            urlHost +\n            urlPath +\n            urlQuery +\n            contentType +\n            nonce +\n            timestamp +\n            version +\n            payloadString;\n\n        try {\n            SecretKeySpec secretKey = new SecretKeySpec(apiKeySecret.getBytes(), \"HmacSHA256\");\n            Mac mac = Mac.getInstance(\"HmacSHA256\");\n            mac.init(secretKey);\n            byte[] rawHmac = mac.doFinal(signature.getBytes());\n            signature = new String(Hex.encodeHex(rawHmac)).toUpperCase();\n\n            HttpClient client = HttpClient.newHttpClient();\n            HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(\"https://www.bitstamp.net/api/v2/user_transactions/\"))\n                .POST(HttpRequest.BodyPublishers.ofString(payloadString))\n                .setHeader(\"X-Auth\", apiKey)\n                .setHeader(\"X-Auth-Signature\", signature)\n                .setHeader(\"X-Auth-Nonce\", nonce)\n                .setHeader(\"X-Auth-Timestamp\", timestamp)\n                .setHeader(\"X-Auth-Version\", version)\n                .setHeader(\"Content-Type\", contentType)\n                .build();\n\n            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n            if (response.statusCode() != 200) {\n                throw new RuntimeException(\"Status code not 200\");\n            }\n\n            String serverSignature = response.headers().map().get(\"x-server-auth-signature\").get(0);\n            String responseContentType = response.headers().map().get(\"Content-Type\").get(0);\n            String stringToSign = nonce + timestamp + responseContentType + response.body();\n\n            mac.init(secretKey);\n            byte[] rawHmacServerCheck = mac.doFinal(stringToSign.getBytes());\n            String newSignature = new String(Hex.encodeHex(rawHmacServerCheck));\n\n            if (!newSignature.equals(serverSignature)) {\n                throw new RuntimeException(\"Signatures do not match\");\n            }\n\n            System.out.println(response.body());\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n\n\n```\n\n</div>\n<div class=\"api__code mb48\">\n    <div class=\"api__code-header\">\n        <span>C++</span>\n        <span class=\"icon icon--code\"></span>\n    </div>\n\n```cpp\n#include <curl/curl.h>\n#include <openssl/hmac.h>\n#include <uuid/uuid.h>\n\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <iomanip>\n\nstatic size_t write_call_back(void *contents, size_t size, size_t nmemb, void *userp)\n{\n    ((std::string*)userp)->append((char*)contents, size * nmemb);\n    return size * nmemb;\n}\n\nstd::string b2a_hex(char *byte_arr, int n)\n{\n    const static std::string hex_codes = \"0123456789abcdef\";\n    std::string hex_string;\n    for ( int i = 0; i < n ; ++i ) {\n        unsigned char bin_value = byte_arr[i];\n        hex_string += hex_codes[( bin_value >> 4 ) & 0x0F];\n        hex_string += hex_codes[bin_value & 0x0F];\n    }\n    return hex_string;\n}\n\nstd::string url_encode(std::string data)\n{\n    std::string res = data;\n    CURL *curl = curl_easy_init();\n\n    if(curl) {\n        char *output = curl_easy_escape(curl, data.c_str(), data.length());\n        if(output) {\n            res = output;\n            curl_free(output);\n        }\n    }\n\n    return res;\n}\n\n\nint main() {\n\n    const std::string api_key = \"api_key\";\n    const std::string api_secret = \"api_key_secret\";\n\n    std::chrono::milliseconds timestamp = std::chrono::duration_cast< std::chrono::milliseconds >(\n            std::chrono::system_clock::now().time_since_epoch()\n    );\n\n    uuid_t uuid;\n    uuid_string_t nonce;\n    uuid_generate(uuid);\n    uuid_unparse_lower(uuid, nonce);\n\n    std::string x_auth = \"BITSTAMP \" + api_key;\n    std::string x_auth_nonce = nonce;\n    std::string x_auth_timestamp = std::to_string(timestamp.count());\n    std::string x_auth_version = \"v2\";\n    std::string content_type = \"application/x-www-form-urlencoded\";\n    std::string payload = url_encode(\"{offset:1}\");\n\n    std::string http_method = \"POST\";\n    std::string url_host = \"www.bitstamp.net\";\n    std::string url_path = \"/api/v2/user_transactions/\";\n    std::string url_query = \"\";\n\n    std::string data_to_sign = \"\";\n    data_to_sign.append(x_auth);\n    data_to_sign.append(http_method);\n    data_to_sign.append(url_host);\n    data_to_sign.append(url_path);\n    data_to_sign.append(url_query);\n    data_to_sign.append(content_type);\n    data_to_sign.append(x_auth_nonce);\n    data_to_sign.append(x_auth_timestamp);\n    data_to_sign.append(x_auth_version);\n    data_to_sign.append(payload);\n\n    // calculate hmac signature\n    unsigned char* result;\n    unsigned int len = 20;\n    result = (unsigned char*)malloc(sizeof(char) * len);\n\n    HMAC_CTX ctx;\n    HMAC_CTX_init(&ctx);\n\n    HMAC_Init_ex(&ctx, api_secret.c_str(), api_secret.length(), EVP_sha256(), NULL);\n    HMAC_Update(&ctx, (unsigned char*)data_to_sign.c_str(), data_to_sign.length());\n    HMAC_Final(&ctx, result, &len);\n    HMAC_CTX_cleanup(&ctx);\n\n    std::string x_auth_signature = b2a_hex( (char *)result, 32 );\n    free(result);\n\n    // send request\n    CURL *curl;\n    CURLcode res;\n    std::string read_buffer;\n\n    curl = curl_easy_init();\n\n    if(curl) {\n\n        struct curl_slist *headers = NULL;\n        headers = curl_slist_append(headers, (\"X-Auth: \" + x_auth).c_str());\n        headers = curl_slist_append(headers, (\"X-Auth-Signature: \" + x_auth_signature).c_str());\n        headers = curl_slist_append(headers, (\"X-Auth-Nonce: \" + x_auth_nonce).c_str());\n        headers = curl_slist_append(headers, (\"X-Auth-Timestamp: \" + x_auth_timestamp).c_str());\n        headers = curl_slist_append(headers, (\"X-Auth-Version: \" + x_auth_version).c_str());\n        headers = curl_slist_append(headers, (\"Content-Type: \" + content_type).c_str());\n\n        std::string url = \"https://\" + url_host + url_path + url_query;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, payload.c_str());\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_call_back);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &read_buffer);\n\n        res = curl_easy_perform(curl);\n\n        if(res != CURLE_OK) {\n            std::cout << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        std::cout << \"curl_easy_perform() response: \" << read_buffer << std::endl;\n\n        curl_easy_cleanup(curl);\n\n    }\n\n    return 0;\n\n}\n\n\n```\n\n</div>\n\n# Changelog\n\n### 2024-12-04\n* Updated withdrawal endpoints:\n  * Crypto withdrawals subject to Travel rule may require address verification\n\n### 2024-11-20\n* Updated Contacts endpoint:\n  * `POST /api/v2/travel_rule/contacts`: Fields **retail_info.first_name** and **retail_info.last_name** are now required.\n\n### 2024-10-15\n* `GET /api/v2/trading-pairs-info/` is obsolete and replaced by endpoint `api/v2/markets/`\n  * We will no longer guarantee `/api/v2/trading-pairs-info/` to work after Dec 31st 2024\n* Added new error code API5012 to `/api/v2/earn/unsubscribe/`\n* `GET /api/v2/currencies/` has been extended with the following information:\n  * networks: which blockchains are supported for withdrawals, minimum withdrawal amounts, deposits, decimal precision and status per blockchain\n\n### 2024-07-17\n* Updated descriptions for Ripple IOU endpoint by adding support for ETH-IOU:\n  * `POST /api/v2/ripple_address/`\n  * `POST /api/v2/ripple_withdrawal/`\n\n### 2024-03-13\n* Added transfer_id param to crypto endpoints:\n  * `POST /api/v2/{currency}_address/` response\n  * `POST /api/v2/{currency}_withdrawal/` request\n\n### 2023-10-12\n* New API changes due to compliance with Travel Rule requirements:\n  * Travel Rule endpoints: https://www.bitstamp.net/api/#tag/Travel-rule-public\n  * Changes to all crypto withdrawals to provide optional Travel Rule data (this data will become mandatory in the near future which will be a breaking change!).\n* All endpoints for creating new orders have an optional **client_order_id field**. If submitted, up until now client_order_id had to be unique. We are deprecating the checking of duplicate **client_order_id** and will allow duplicates beginning November 2023. If you currently rely on us checking for duplicates and us rejecting those, this change may cause you to submit multiple orders so please make the necessary changes to not rely on that check.\n* New API endpoints that enable you to access full Earn (Staking and Lending) functionality.\n\n### 2023-09-29\n* Added **revoke_all_api_keys** as a kill switch functionality to terminate all API connectivity:\n  * `POST /api/v2/revoke_all_api_keys/`\n\n### 2023-09-25\n* Updated GTD order description by noting that the orders expire at midnight:\n  * `POST /api/v2/buy/{market_symbol}/`\n  * `POST /api/v2/sell/{market_symbol}/`\n\n### 2023-09-22\n* Extended error responses for `/api/v2/cancel_order`:\n  * `POST /api/v2/cancel_order/`\n\n### 2023-08-31\n* Added market property with the goal of deprecating **currency_pair** long term:\n  * `GET /api/v2/fees/trading/`\n* Added datetime and type properties to order status endpoint:\n  * `GET /api/v2/order_status/`\n\n### 2023-07-05\n* Introduced a new side field (0 - buy; 1 - sell) to all Ticker endpoints:\n  * `GET /api/v2/ticker/`\n  * `GET /api/v2/ticker/{currency_pair}/`\n  * `GET /api/v2/ticker_hour/`\n\n### 2023-06-29\n* Updated **destination_tag** field description for Ripple IOU address endpoint:\n  * `POST /api/v2/ripple_address/`\n\n### 2023-04-07\n* Introduced a new Currencies endpoint:\n  * `GET /api/v2/currencies/`: Get listed currencies info.\n",
    "title": "Bitstamp Public API",
    "version": "v2"
  },
  "openapi": "3.0.3",
  "paths": {
    "/api/v2/account_balances/": {
      "post": {
        "description": "Return account balances.",
        "operationId": "GetAccountBalances",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "available": "90.00",
                    "currency": "usd",
                    "reserved": "10.00",
                    "total": "100.00"
                  }
                ],
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccountBalancesResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Account balances",
        "tags": [
          "Account balances"
        ]
      }
    },
    "/api/v2/account_balances/{currency}/": {
      "post": {
        "description": "Return account balances for currency.",
        "operationId": "GetAccountBalancesForCurrency",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBalancesResponse"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Account balance for currency",
        "tags": [
          "Account balances"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "currency",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/btc_unconfirmed/": {
      "post": {
        "description": "This API call is cached for 60 seconds. This call will be executed on the account (Sub or Main), to which\nthe used API key is bound to.\n",
        "operationId": "GetUnconfirmedBTCDeposits",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DepositAddressResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Unconfirmed bitcoin deposits",
        "tags": [
          "Deposits"
        ]
      }
    },
    "/api/v2/buy/instant/{market_symbol}/": {
      "post": {
        "description": "Open a buy instant order. By placing an instant order you acknowledge that the execution of your order\ndepends on the market conditions and that these conditions may be subject to sudden changes that cannot be\nforeseen. This call will be executed on the account (Sub or Main), to which the used API key is bound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing amount and/or price POST parameters | Missing one or both parameters. |\n| 'parameter': Enter a number. Use \".\" as a decimal point. | 'parameter' can only be number. |\n| Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |\n| You can only buy 'amount' 'currency'. Check your account balance for details. | Account has less 'available_currency' than is required to make this order. |\n| Maximum market buy amount at the moment is 'amount' 'currency'. Please use limit order instead. | Order amount exceeds the limit amount set for market buy orders. |\n| Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |\n</details>\n",
        "operationId": "OpenInstantBuyOrder",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BuyInstantOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BuySellOrderResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Buy instant order",
        "tags": [
          "Orders"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/buy/market/{market_symbol}/": {
      "post": {
        "description": "Open a buy market order. By placing a market order you acknowledge that the execution of your order depends\non the market conditions and that these conditions may be subject to sudden changes that cannot be\nforeseen. This call will be executed on the account (Sub or Main), to which the used API key is bound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing amount and/or price POST parameters | Missing one or both parameters. |\n| 'parameter': Enter a number. Use \".\" as a decimal point. | 'parameter' can only be number. |\n| Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |\n| You can only buy 'amount' 'currency'. Check your account balance for details. | Account has less 'available_currency' than is required to make this order. |\n| Maximum market buy amount at the moment is 'amount' 'currency'. Please use limit order instead. | Order amount exceeds the limit amount set for market buy orders. |\n| Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |\n</details>\n",
        "operationId": "OpenMarketBuyOrder",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BuySellMarketOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BuySellOrderResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Buy market order",
        "tags": [
          "Orders"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/buy/{market_symbol}/": {
      "post": {
        "description": "Open a buy limit order. This call will be executed on the account (Sub or Main), to which the used API key\nis bound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing amount and/or price POST parameters | Missing one or both parameters. |\n| 'parameter': Enter a number. Use \".\" as a decimal point. | 'parameter' can only be number. |\n| Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |\n| Price is more than 20% above market price. | Order price must not exceed 20% of current price. |\n| You need 'order_value' USD to open that order. You have only 'available_fiat' USD available. Check your account balance for details. | Account has less 'available_fiat' than is required to make this order. |\n| Sell if executed price must be higher than buy price. | 'limit_price' must be larger than 'price' parameter. |\n| Both limit_price and daily_order cannot be set. | Only one of those parameters can be set. |\n| Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |\n</details>\n",
        "operationId": "OpenLimitBuyOrder",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BuySellLimitOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BuySellOrderResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Buy limit order",
        "tags": [
          "Orders"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/cancel_all_orders/": {
      "post": {
        "description": "Cancel all open orders. This call will be executed on the account (Sub or Main), to which the used API key is bound to.",
        "operationId": "CancelAllOrders",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelAllOrdersResponse"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Cancel all orders",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v2/cancel_all_orders/{market_symbol}/": {
      "post": {
        "description": "Cancel all open orders for a market. This call will be executed on the account (Sub or Main), to which the used API key is bound to.",
        "operationId": "CancelOrdersForMarket",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelAllOrdersResponse"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Cancel all orders for market",
        "tags": [
          "Orders"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/cancel_order/": {
      "post": {
        "description": "Cancel an order. This call will be executed on the account (Sub or Main), to which the used API key is\nbound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing id POST param. | Id parameter missing. |\n| Invalid id POST param. | Id parameter must be a positive integer. |\n| Invalid client_cancel_id POST param. | client_cancel_id parameter can contain at most 180 characters. |\n| Order not found | Order with that id was not found in orderbook. Order might already be filled or canceled. Please check order status. |\n| Order cancellation failed due to internal error. Please try again. | Please retry cancelling order. |\n| Order cancelattion failed due to trade halt. | You can cancel order after trade halt is lifted. |\n</details>\n",
        "operationId": "CancelOrder",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CancelOrderResponse"
                    },
                    {
                      "$ref": "#/components/schemas/SimpleErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Cancel order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v2/crypto-transactions/": {
      "post": {
        "description": "Return user's crypto transactions. This call will be executed on the account, to which the used API key is\nbound to. This call is for your main account only.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Limit too large | Max value of limit parameter is 1000. |\n| Invalid limit | Limit parameter should be number from 1 to 1000. |\n| Offset too large | Offset parameter cannot be larger than 200000. |\n| Invalid offset | Offset parameter needs to be a number from 0 to 200000. |\n</details>\n",
        "operationId": "GetCryptoUserTransactions",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CryptoTransactionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CryptoTransactionsResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Crypto transactions",
        "tags": [
          "Transactions private"
        ]
      }
    },
    "/api/v2/currencies/": {
      "get": {
        "description": "Returns list of all currencies with basic data.",
        "operationId": "GetCurrencies",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CurrencySchema"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "Currencies",
        "tags": [
          "Tickers"
        ]
      }
    },
    "/api/v2/earn/subscribe/": {
      "post": {
        "description": "Subscribe given amount to lending / staking.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n| Response Code | Status Code | Reason                                                                              |\n|---------------|-------------|-------------------------------------------------------------------------------------|\n| 200           |             | Successfully subscribed to earn.                                                    |\n| 400           | API5001     | Earn request amount too low.                                                        |\n| 400           | API5002     | Earn request amount too high.                                                       |\n| 400           | API5003     | Decimal places in amount exceed maximum allowed.                                    |\n| 400           | API5004     | Operation is unsupported.                                                           |\n| 400           | API5005     | Operation is currently unavailable, please try again later.                         |\n| 400           | API5006     | Required personal information is missing, please reach out to support@bitstamp.net. |\n| 400           | API5007     | Operation is unavailable, please reach out to support@bitstamp.net.                 |\n| 400           | API5011     | Something went wrong, try again later.                                              |\n| 403           |             | This feature is not available for your account.                                     |\n",
        "operationId": "EarnSubscribe",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EarnSubscriptionSchema"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Post operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            },
            "description": "ForbiddenError | Provided data is invalid."
          }
        },
        "security": [],
        "summary": "Subscribe to earn",
        "tags": [
          "Earn"
        ]
      }
    },
    "/api/v2/earn/subscriptions/": {
      "get": {
        "description": "Get earn subscriptions for user.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n| Response Code | Status Code | Reason                                                      |\n|---------------|-------------|-------------------------------------------------------------|\n| 200           |             | Returned earn subscriptions                                 |\n| 400           | API5011     | Something went wrong, try again later.                      |\n",
        "operationId": "EarnSubscriptions",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EarnSubscriptionsSchema"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "Get earn subscriptions",
        "tags": [
          "Earn"
        ]
      }
    },
    "/api/v2/earn/subscriptions/setting/": {
      "post": {
        "description": "Manage subscription settings (opt in, opt out). Currently only supported for staking.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n| Response Code | Status Code | Reason                                                      |\n|---------------|-------------|-------------------------------------------------------------|\n| 200           |             | Successfully update subscription setting.                   |\n| 400           | API5004     | Operation is unsupported.                                   |\n| 400           | API5005     | Operation is currently unavailable, please try again later. |\n| 400           | API5008     | Already opted in.                                           |\n| 400           | API5009     | Not opted in.                                               |\n| 400           | API5010     | Insufficient balance.                                       |\n| 400           | API5011     | Something went wrong, try again later.                      |\n| 403           |             | This feature is not available for your account.             |\n",
        "operationId": "EarnSubscriptionsSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EarnSubscriptionSettingSchema"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Post operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            },
            "description": "ForbiddenError | Provided data is invalid."
          }
        },
        "security": [],
        "summary": "Manage subscription settings",
        "tags": [
          "Earn"
        ]
      }
    },
    "/api/v2/earn/transactions/": {
      "get": {
        "description": "Get earn transaction history.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n| Response Code | Status Code | Reason                                                      |\n|---------------|-------------|-------------------------------------------------------------|\n| 200           |             | Returned earn transaction history.                          |\n| 400           | API5011     | Something went wrong, try again later.                      |\n",
        "operationId": "EarnTransactions",
        "parameters": [
          {
            "description": "Currency",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "example": "ETH",
              "type": "string",
              "writeOnly": true
            }
          },
          {
            "description": "Limit result to that many events (default: 100; maximum: 1000)",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "example": 100,
              "format": "int32",
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "writeOnly": true
            }
          },
          {
            "description": "Skip that many events before returning results (default: 0, maximum: 200000)",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int32",
              "maximum": 200000,
              "minimum": 0,
              "type": "integer",
              "writeOnly": true
            }
          },
          {
            "description": "Currency in which value is calculated",
            "in": "query",
            "name": "quote_currency",
            "required": false,
            "schema": {
              "example": "USD",
              "type": "string",
              "writeOnly": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EarnTransactionSchema"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "Get earn transactions",
        "tags": [
          "Earn"
        ]
      }
    },
    "/api/v2/earn/unsubscribe/": {
      "post": {
        "description": "Unsubscribe given amount from lending / staking.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n| Response Code | Status Code | Reason                                                      |\n|---------------|-------------|-------------------------------------------------------------|\n| 200           |             | Successfully unsubscribed from earn.                        |\n| 400           | API5001     | Earn request amount too low.                                |\n| 400           | API5002     | Earn request amount too high.                               |\n| 400           | API5003     | Decimal places in amount exceed maximum allowed.            |\n| 400           | API5004     | Operation is unsupported.                                   |\n| 400           | API5005     | Operation is currently unavailable, please try again later. |\n| 400           | API5011     | Something went wrong, try again later.                      |\n| 400           | API5012     | Staked balance is insufficient.                             |\n| 403           |             | This feature is not available for your account.             |\n",
        "operationId": "EarnUnsubscribe",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EarnSubscriptionSchema"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Post operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            },
            "description": "ForbiddenError | Provided data is invalid."
          }
        },
        "security": [],
        "summary": "Unsubscribe from earn",
        "tags": [
          "Earn"
        ]
      }
    },
    "/api/v2/eur_usd/": {
      "get": {
        "description": "Return EUR/USD conversion rate.",
        "operationId": "GetEURUSDConversionRate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EurUsdConversionRateResponse"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "EUR/USD conversion rate",
        "tags": [
          "Market info"
        ]
      }
    },
    "/api/v2/fees/trading/": {
      "post": {
        "description": "Return all trading fees.",
        "operationId": "GetAllTradingFees",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "currency_pair": "btcusd",
                    "fees": [
                      {
                        "maker": "0.15000",
                        "taker": "0.16000"
                      }
                    ],
                    "market": "btcusd"
                  }
                ],
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FeeTradingResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Trading fees",
        "tags": [
          "Fees"
        ]
      }
    },
    "/api/v2/fees/trading/{market_symbol}/": {
      "post": {
        "description": "Return trading fees for market.",
        "operationId": "GetTradingFeesForCurrency",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeTradingResponse"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Trading fee for market",
        "tags": [
          "Fees"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/fees/withdrawal/": {
      "post": {
        "description": "Return withdrawal fees.",
        "operationId": "GetAllWithdrawalFees",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "currency": "btc",
                    "fee": "0.00015000",
                    "network": "bitcoin"
                  }
                ],
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FeeWithdrawalResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Withdrawal fees",
        "tags": [
          "Fees"
        ]
      }
    },
    "/api/v2/fees/withdrawal/{currency}/": {
      "post": {
        "description": "Return withdrawal fee for currency.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Invalid network selection | The selected network is not supported for 'currency'. Please select a compatible network for it. |\n</details>\n",
        "operationId": "GetWithdrawalFeeForCurrency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeeWithdrawalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeWithdrawalResponse"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Withdrawal fee for currency",
        "tags": [
          "Fees"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "currency",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/instant_convert_address/info/": {
      "post": {
        "description": "Shows transactions for the instant convert address.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Address not found. | Provided address is wrong. |\n</details>\n",
        "operationId": "GetLiquidationAddressTransactions",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/InstantConvertAddressInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "InstantConvertAddressInfoResponse": {
                    "value": [
                      {
                        "address": "3MDvHUAg41uJx1511gDotsf4ccKuc9frz1",
                        "currency_pair": "BTC/USD",
                        "transactions": [
                          {
                            "count": 1,
                            "order_id": 1,
                            "trades": [
                              {
                                "btc_amount": "1.0",
                                "exchange_rate": "1.0",
                                "fees": "0.0"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "ErrorResponse": {
                    "value": {
                      "reason": "The reason for the error.",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/InstantConvertAddressInfoResponse"
                      },
                      "type": "array"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Instant convert address",
        "tags": [
          "Instant convert"
        ]
      }
    },
    "/api/v2/instant_convert_address/new/": {
      "post": {
        "description": "Creates a new instant convert address which will automatically sell your crypto for specified fiat currency.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing liquidation_currency parameter. | Parameter liquidation_currency is required for this call. |\n| Invalid currency / Currency [...] not supported. | Invalid liquidation_currency. |\n| Cannot create new address, please try later. | At the moment we can't create new deposit address. Try again later. |\n| Invalid address format. | Invalid address_format. |\n| Your trading features are currently disabled | No new liquidation addresses can be created at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |\n</details>\n",
        "operationId": "RequestNewLiquidationAddress",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/NewInstantConvertAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/NewInstantConvertAddressResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "New instant convert address",
        "tags": [
          "Instant convert"
        ]
      }
    },
    "/api/v2/markets/": {
      "get": {
        "description": "View that returns list of all available markets.",
        "operationId": "GetMarkets",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MarketSchema"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "Markets",
        "tags": [
          "Market info"
        ]
      }
    },
    "/api/v2/my_markets/": {
      "get": {
        "description": "Returns all markets that can be traded on selected account.\n",
        "operationId": "GetUserTradingMarkets",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "BTC/USD",
                    "url_symbol": "btcusd"
                  }
                ],
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TradingPair"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "Trading markets",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v2/ohlc/{market_symbol}/": {
      "get": {
        "description": "Returns OHLC (Open High Low Close) data.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing data for required field. | Step and limit parameters are missing. |\n| Not a valid choice. | Value entered in parameter is invalid. |\n| Must be between 1 and 1000. | Limit value must be between 1 and 1000. |\n</details>\n",
        "operationId": "GetOHLCData",
        "parameters": [
          {
            "description": "Timeframe in seconds.",
            "in": "query",
            "name": "step",
            "required": true,
            "schema": {
              "enum": [
                60,
                180,
                300,
                900,
                1800,
                3600,
                7200,
                14400,
                21600,
                43200,
                86400,
                259200
              ],
              "example": 60,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit OHLC results.",
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "example": 50,
              "format": "int32",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Unix timestamp from when OHLC data will be started.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "example": 10000,
              "format": "int32",
              "maximum": 253402297199,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "Unix timestamp to when OHLC data will be shown.If none from start or end timestamps are posted then endpoint returns OHLC data to current unixtime. If both start and end timestamps are posted, end timestamp will be used.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "example": 60,
              "format": "int32",
              "maximum": 253402297199,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "If set, results won't include current (open) candle.",
            "in": "query",
            "name": "exclude_current_candle",
            "required": false,
            "schema": {
              "default": false,
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/OHLCDataResponseSchema"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "OHLC data",
        "tags": [
          "Market info"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "pattern": "[a-z0-9\\-]+",
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/open_orders/": {
      "post": {
        "description": "Return user's open orders. This API call is cached for 10 seconds. This call will be executed on the account (Sub or Main), to which the used API key is bound to.",
        "operationId": "GetAllOpenOrders",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OpenOrdersAllResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Open orders",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v2/open_orders/{market_symbol}/": {
      "post": {
        "description": "Return user's open orders for market. This API call is cached for 10 seconds. This call will be executed on the account (Sub or Main), to which the used API key is bound to.",
        "operationId": "GetOpenOrdersForMarket",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OpenOrdersPairResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Open orders for market",
        "tags": [
          "Orders"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "pattern": "[a-z0-9\\-]+",
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/order_book/{market_symbol}/": {
      "get": {
        "description": "Returns order book data.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| POST method not allowed for this request. | HTTP method other than GET used. |\n| Invalid GET parameter. | Missing group parameter. |\n| Internal error. | Order book unavailable. |\n</details>\n",
        "operationId": "GetOrderBook",
        "parameters": [
          {
            "description": "The group parameter is used for accessing different data from order book. Possible values are 0 (orders are not grouped at same price), 1 (orders are grouped at same price - default) or 2 (orders with their order ids are not grouped at same price).",
            "in": "query",
            "name": "group",
            "required": false,
            "schema": {
              "example": "0",
              "format": "int32",
              "maximum": 2,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrderBookResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "Order book",
        "tags": [
          "Order book"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/order_status/": {
      "post": {
        "description": "Returns order status. This call will be executed on the account (Sub or Main), to which the\nused API key is bound to. Order can be fetched by using either id or client_order_id parameter. For closed\norders, this call only returns information for the last 30 days. 'Order not found' error will be returned\nfor orders outside this time range.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing id POST param | Id parameter missing. |\n| Invalid order id | Order id parameter can only be number. |\n| Order not found. | Order with that id was not found in our system. |\n</details>\n",
        "operationId": "GetOrderStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrderStatusResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Order status",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v2/revoke_all_api_keys/": {
      "post": {
        "description": "Revoke all API keys across all user's accounts.",
        "operationId": "RevokeAllAPIKeys",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmptySchema"
              }
            }
          },
          "description": "This endpoint does not expect a request body."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokedAPIKeySchema"
                }
              }
            },
            "description": "Post operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            },
            "description": "Provided data is invalid."
          }
        },
        "security": [],
        "summary": "Revoke all API access",
        "tags": [
          "Security"
        ]
      }
    },
    "/api/v2/ripple_address/": {
      "post": {
        "description": "This API call is cached for 60 seconds. This call will be executed on the account (Sub or Main), to which\nthe used API key is bound to. This endpoint supports withdrawals of USD, BTC, EUR and ETH IOU on the XRP Ledger.\n\n*IOU supported globally except in the US and Singapore. ETH-IOU is also unsupported in UK.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| User not verified | Your account needs to be verified before you can use this endpoint. |\n| Your deposits are currently disabled | No new deposits can be made at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |\n</details>\n",
        "operationId": "GetRippleIOUDepositAddress",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RippleIOUDepositAddressResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Ripple IOU deposit address",
        "tags": [
          "Deposits"
        ]
      }
    },
    "/api/v2/ripple_withdrawal/": {
      "post": {
        "description": "This call will be executed on the account (Sub or Main), to which the used\nAPI key is bound to. This endpoint supports withdrawals of USD, BTC, EUR or ETH IOU on the XRP Ledger.\n\n*IOU supported globally except in the US and Singapore. ETH-IOU is also unsupported in UK\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing amount and/or address POST parameters | One or both parameters missing. |\n| User not verified | Your account needs to be verified before you can use this endpoint. |\n| 'crypto_currency' withdrawals are currently unavailable for your account | Contact support for additional information. |\n| Not allowed to withdraw to specified 'crypto_currency' address | API key is set for withdrawing to another 'crypto_currency' address. |\n| Enter a number. Use \".\" as a decimal point | Amount parameter can only be number. |\n| You have only 'available' 'crypto_currency' available. Check your account balance for details | Account has less available 'crypto_currency' than are required to make this withdrawal. |\n| Your withdrawals are currently disabled | No new withdrawals can be opened at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |\n| Ensure this value is greater than or equal to 'minimum_withdrawal_amount' | Minimum withdrawal amount is 'minimum_withdrawal_amount'. |\n| Ensure this value has at least 'minimum_address_length' characters (it has x). Ensure this value has at most 'maximum_address_length' characters (it has x). | Address parameter must be between 'minimum_address_length' and 'maximum_address_length' characters long. |\n| Contact does not exist | Review and validate the contact_uuid to ensure it matches an existing contact, you may also create contacts at the /v2/travel_rule/contacts endpoint |\n| Contact is missing required information | Ensure that contact has all the required information in case of retail_info, first_name and last_name are required. |\n| Vasp does not exist | Verify that the vasp_uuid exists within the /v2/travel_rule/vasps endpoint. |\n| contact_uuid: You must set this field because contact_thirdparty=True | contact_uuid must be provided if withdrawing to a third party |\n| The address you provided is not verified | You must verify this address before you can withdraw to it. |\n\n</details>\n",
        "operationId": "RequestRippleIOUWithdrawal",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RippleIOUWithdrawalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RippleIOUWithdrawalResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Ripple IOU withdrawal",
        "tags": [
          "Withdrawals"
        ]
      }
    },
    "/api/v2/sell/instant/{market_symbol}/": {
      "post": {
        "description": "Open an instant sell order. By placing an instant order you acknowledge that the execution of your order\ndepends on the market conditions and that these conditions may be subject to sudden changes that cannot be\nforeseen. This call will be executed on the account (Sub or Main), to which the used API key is bound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing amount and/or price POST parameters | Missing one or both parameters. |\n| 'parameter': Enter a number. Use \".\" as a decimal point. | 'parameter' can only be number. |\n| Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |\n| You can only sell 'amount' 'currency'. Check your account balance for details. | Account has less 'available_currency' than is required to make this order. |\n| Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |\n</details>\n",
        "operationId": "OpenInstantSellOrder",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SellInstantOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BuySellOrderResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Sell instant order",
        "tags": [
          "Orders"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/sell/market/{market_symbol}/": {
      "post": {
        "description": "Open a sell market order. By placing a market order you acknowledge that the execution of your order depends\non the market conditions and that these conditions may be subject to sudden changes that cannot be\nforeseen. This call will be executed on the account (Sub or Main), to which the used API key is bound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing amount and/or price POST parameters | Missing one or both parameters. |\n| 'parameter': Enter a number. Use \".\" as a decimal point. | 'parameter' can only be number. |\n| Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |\n| You can only sell 'amount' 'currency'. Check your account balance for details. | Account has less 'available_currency' than is required to make this order. |\n| No buy orders for currency pair 'currency_pair' | The buy side of the orderbook for 'currency_pair' is empty, therefore a market sell order cannot be placed. |\n| Maximum market sell amount at the moment is 'amount' 'currency'. Please use limit order instead. | Order amount exceeds the limit amount set for market sell orders. |\n| Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |\n</details>\n",
        "operationId": "OpenMarketSellOrder",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BuySellMarketOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BuySellOrderResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Sell market order",
        "tags": [
          "Orders"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/sell/{market_symbol}/": {
      "post": {
        "description": "Open a sell limit order. This call will be executed on the account (Sub or Main), to which the used API key\nis bound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing amount and/or price POST parameters | Missing one or both parameters. |\n| 'parameter': Enter a number. Use \".\" as a decimal point. | 'parameter' can only be number. |\n| Minimum order size is 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH | Order value must be at least 10 USD / 10 EUR / 10 GBP / 10 USDT / 10 USDC / 10 PAX / 10 GUSD / 0.0002 BTC / 0.002 ETH |\n| Price is more than 20% below market price. | Order price must not exceed 20% of current price. |\n| You have only 'available_btc' BTC available. Check your account balance for details. | Account has less 'available_btc' than is required to make this order. |\n| Buy if executed price must be lower than sell price. | 'limit_price' must be lower than 'price' parameter. |\n| Both limit_price and daily_order cannot be set. | Only one of those parameters can be set. |\n| Order could not be placed. | Order could not be placed (perhaps due to internal error or trade halt). Please retry placing order. |\n</details>\n",
        "operationId": "OpenLimitSellOrder",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BuySellLimitOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BuySellOrderResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Sell limit order",
        "tags": [
          "Orders"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/ticker/": {
      "get": {
        "description": "Return ticker data for all currency pairs. Passing any GET parameters, will result in your request being rejected.",
        "operationId": "GetCurrencyPairTickers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "ask": "2211.00",
                    "bid": "2188.97",
                    "high": "2811.00",
                    "last": "2211.00",
                    "low": "2188.97",
                    "open": "2211.00",
                    "open_24": "2211.00",
                    "pair": "BTC/USD",
                    "percent_change_24": "13.57",
                    "side": "0",
                    "timestamp": "1643640186",
                    "volume": "213.26801100",
                    "vwap": "2189.80"
                  }
                ],
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TickerWithPairResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "All currency pairs tickers",
        "tags": [
          "Tickers"
        ]
      }
    },
    "/api/v2/ticker/{market_symbol}/": {
      "get": {
        "description": "Return ticker data for the requested currency pair. Passing any GET parameters, will result in your request being rejected.",
        "operationId": "GetMarketTicker",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TickerResponse"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "Market ticker",
        "tags": [
          "Tickers"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/ticker_hour/{market_symbol}/": {
      "get": {
        "description": "Return hourly ticker data for the requested currency pair. Passing any GET parameters, will result in your request being rejected.",
        "operationId": "GetHourlyCurrencyPairTicker",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TickerHourResponse"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "Hourly  ticker",
        "tags": [
          "Tickers"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/transactions/{market_symbol}/": {
      "get": {
        "description": "Return transaction data from a given time frame.",
        "operationId": "GetTransactions",
        "parameters": [
          {
            "description": "The time interval from which we want the transactions to be returned. Possible values are minute, hour (default) or day.",
            "in": "query",
            "name": "time",
            "required": false,
            "schema": {
              "enum": [
                "day",
                "hour",
                "minute"
              ],
              "example": "minute",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponse"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "Transactions",
        "tags": [
          "Transactions public"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/transfer-from-main/": {
      "post": {
        "description": "Transfers the desired balance from your Main Account to a Sub Account, specified by the subAccount\nparameter. This call can only be performed by your Main Account.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| 'parameter': Enter a number. Use \".\" as a decimal point. | 'parameter' can only be number. |\n| You have only 'available' 'currency' available. Check your account balance for details. | Account has less 'available_currency' than is required to make this transfer. |\n| Select a valid choice. X is not one of the available choices. | X is not valid currency. Select a valid currency. |\n| Sub account with identifier \"X\" does not exist. | Can't find sub account with id X. |\n</details>\n",
        "operationId": "TransferFromMainToSub",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TransferToFromMainRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TransferToFromMainResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Transfer balance from Main to Sub Account",
        "tags": [
          "Sub account"
        ]
      }
    },
    "/api/v2/transfer-to-main/": {
      "post": {
        "description": "Transfers the desired balance from a Sub Account to your Main Account.\nCan be called by either the Main Account or a Sub Account, but requires a permission in both cases.\nThe subAccount parameter must be provided if the Main Account is initiating the call.\nIf a Sub Account is making the call, then it is the target Sub Account for the transfer and no further\nclarification is required.\nIn that case, passing this parameter will have no additional effect.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| 'parameter': Enter a number. Use \".\" as a decimal point. | 'parameter' can only be number. |\n| You have only 'available' 'currency' available. Check your account balance for details. | Account has less 'available_currency' than is required to make this transfer. |\n| Select a valid choice. X is not one of the available choices. | X is not valid currency. Select a valid currency. |\n| Sub account with identifier \"X\" does not exist. | Can't find sub account with id X. |\n</details>\n",
        "operationId": "TransferFromSubToMain",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TransferToFromMainRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TransferToFromMainResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Transfer balance from Sub to Main account",
        "tags": [
          "Sub account"
        ]
      }
    },
    "/api/v2/travel_rule/contacts/": {
      "get": {
        "description": "Returns all contacts that have been previously created.\nThese can then be used to provide the originator or beneficiary details of a Travel Rule message, when\ntransferring crypto from/to the platform.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n| Response Code | Status Code | Reason                                                                     |\n|---------------|-------------|----------------------------------------------------------------------------|\n| 200           |             | Successfully retrieved the list of contacts.                               |\n| 403           |             | You do not have sufficient permissions to access this endpoint.            |\n",
        "operationId": "GetAllContacts",
        "parameters": [
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ContactSchema"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get operation"
          }
        },
        "security": [],
        "summary": "Get all contacts",
        "tags": [
          "Travel rule private"
        ]
      },
      "post": {
        "description": "Enables a contact to be created and relevant information to be provided and stored.\nThis can then be used to provide the originator or beneficiary details of a Travel Rule message, when\ntransferring crypto from/to the platform.\n\n| Response Code | Status Code | Reason                                                                     |\n|---------------|-------------|----------------------------------------------------------------------------|\n| 201           |             | Successfully created the contact.                                          |\n| 403           |             | You do not have sufficient permissions to access this endpoint.            |\n",
        "operationId": "CreateContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSchema"
                }
              }
            },
            "description": "Post operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            },
            "description": "Provided data is invalid."
          }
        },
        "security": [],
        "summary": "Create contact",
        "tags": [
          "Travel rule private"
        ]
      }
    },
    "/api/v2/travel_rule/contacts/{contact_uuid}/": {
      "get": {
        "description": "Returns a specific contact that has been previously created.\nThis can then be used to provide the originator or beneficiary details of a Travel Rule message, when\ntransferring crypto from/to the platform.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n| Response Code | Status Code | Reason                                                                     |\n|---------------|-------------|----------------------------------------------------------------------------|\n| 200           |             | Successfully retrieved the contact.                                        |\n| 403           |             | You do not have sufficient permissions to access this endpoint.            |\n| 404           |             | Contact with given contact uuid is not found.                              |\n",
        "operationId": "GetContact",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSchema"
                }
              }
            },
            "description": "Get operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            },
            "description": "NotFoundError"
          }
        },
        "security": [],
        "summary": "Get contact",
        "tags": [
          "Travel rule private"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "contact_uuid",
          "required": true,
          "schema": {
            "pattern": "([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})",
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/travel_rule/vasps/": {
      "get": {
        "description": "A list of Virtual Asset Service Providers needed to comply with the Travel Rule.\nThese may be needed when transferring cryptocurrency from/to the platform.\nThis is required in cases where the originating or destination address of the crypto transfer\nis hosted by a VASP.\n\n**The below table defines the HTTP Status codes that this API may return**\n\n| Response Code | Status Code | Reason                                                                     |\n|---------------|-------------|----------------------------------------------------------------------------|\n| 200           |             | Successfully retrieved the vasp list.                                      |\n| 400           |             | Could not fetch VASP list, service unavailable.                            |\n",
        "operationId": "VaspList",
        "parameters": [
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/VaspSchema"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationSchema"
                    }
                  }
                }
              }
            },
            "description": "Get operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchema"
                }
              }
            },
            "description": "RequestError"
          }
        },
        "security": [],
        "summary": "VASP list",
        "tags": [
          "Travel rule public"
        ]
      }
    },
    "/api/v2/user_transactions/": {
      "post": {
        "description": "Return user transactions from a given time frame. This call will be executed on the account (Sub\nor Main), to which the used API key is bound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Invalid offset | Offset parameter should be number from 0 to 200000. |\n| Limit too large | Max value of limit parameter is 1000. |\n| Invalid limit | Limit parameter should be number from 1 to 1000. |\n| Invalid sort parameter | Sort parameter can only be 'asc' or 'desc'. |\n| Invalid since_timestamp parameter | since_timestamp can only be digit. |\n| since_timestamp parameter must be higher than .. | Make sure that since_timestamp is less than 30 days in the past. |\n| Failed to convert since_timestamp parameter | Check the value of since_timestamp parameter. |\n| Invalid until_timestamp parameter | until_timestamp can only be digit. |\n| until_timestamp parameter must be higher than .. | Make sure that until_timestamp is less than 30 days in the past. |\n| Failed to convert until_timestamp parameter | Check the value of until_timestamp parameter. |\n</details>\n",
        "operationId": "GetUserTransactions",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserTransactionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "UserTransactionsResponse": {
                    "value": [
                      {
                        "datetime": "2022-03-01 10:54:53.849000",
                        "fee": "0.62563",
                        "id": 1,
                        "order_id": 1463489000206336,
                        "self_trade": true,
                        "self_trade_order_id": 1,
                        "type": "1",
                        "{currency_pair}": 1,
                        "{from_currency}": "-1.0",
                        "{to_currency}": "1.0"
                      }
                    ]
                  },
                  "ErrorResponse": {
                    "value": {
                      "reason": "The reason for the error.",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/UserTransactionsResponse"
                      },
                      "type": "array"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "User transactions",
        "tags": [
          "Transactions private"
        ]
      }
    },
    "/api/v2/user_transactions/{market_symbol}/": {
      "post": {
        "description": "Return user transactions for a market from a given time frame. This call will be executed on\nthe account (Sub or Main), to which the used API key is bound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Invalid offset | Offset parameter should be number from 0 to 200000. |\n| Limit too large | Max value of limit parameter is 1000. |\n| Invalid limit | Limit parameter should be number from 1 to 1000. |\n| Invalid sort parameter | Sort parameter can only be 'asc' or 'desc'. |\n| Invalid since_timestamp parameter | since_timestamp can only be digit. |\n| since_timestamp parameter must be higher than .. | Make sure that since_timestamp is less than 30 days in the past. |\n| Failed to convert since_timestamp parameter | Check the value of since_timestamp parameter. |\n| Invalid until_timestamp parameter | until_timestamp can only be digit. |\n| until_timestamp parameter must be higher than .. | Make sure that until_timestamp is less than 30 days in the past. |\n| Failed to convert until_timestamp parameter | Check the value of until_timestamp parameter. |\n</details>\n",
        "operationId": "GetUserTransactionsForMarket",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserTransactionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "UserTransactionsResponse": {
                    "value": [
                      {
                        "datetime": "2022-03-01 10:54:53.849000",
                        "fee": "0.62563",
                        "id": 1,
                        "order_id": 1463489000206336,
                        "self_trade": true,
                        "self_trade_order_id": 1,
                        "type": "1",
                        "{currency_pair}": 1,
                        "{from_currency}": "-1.0",
                        "{to_currency}": "1.0"
                      }
                    ]
                  },
                  "ErrorResponse": {
                    "value": {
                      "reason": "The reason for the error.",
                      "status": "error"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/UserTransactionsResponse"
                      },
                      "type": "array"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "User transactions for market",
        "tags": [
          "Transactions private"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "market_symbol",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/websockets_token/": {
      "post": {
        "description": "Generates token required for subscribing to private WebSocket channels.",
        "operationId": "GetWebsocketToken",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsocketsTokenResponse"
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Websockets token",
        "tags": [
          "Websocket"
        ]
      }
    },
    "/api/v2/withdrawal-requests/": {
      "post": {
        "description": "Return user's withdrawal requests. This call will be executed on the account (Sub or Main), to which the\nused API key is bound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Invalid timedelta | Timedelta needs to have only numeric characters. |\n| Timedelta too large | Timedelta too large. |\n| Invalid offset | Offset needs to be numeric characters between 0 and 200000. |\n| Invalid limit | Limit needs to be numeric characters between 1 and 1000. |\n| Invalid id | Id needs to have only numeric characters. |\n| Both limit and offset must be present | Both limit and offset must be present. |\n| Too many parameters | Pick one or combination of parameters and run again. |\n</details>\n",
        "operationId": "GetWithdrawalRequests",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalRequestsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/WithdrawalRequestsResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Withdrawal requests",
        "tags": [
          "Withdrawals"
        ]
      }
    },
    "/api/v2/withdrawal/cancel/": {
      "post": {
        "description": "Cancels a bank or crypto withdrawal request. This call can only be performed by your Main Account.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Cancelling bank withdrawals with sub account API keys is not supported. | This API endpoint can only be utilized by your main account. |\n| Missing parameters: [...] | Parameters stated in the list ([...]) are required for this call. |\n| No active bank withdrawal with id=X found. | Could not find any active bank withdrawal with the id X. Will return the same response for already cancelled withdrawal requests. |\n| Cannot cancel a withdrawal in process (id=X). | The bank withdrawal request with id=X is currently being processed and cannot be cancelled. |\n| Your withdrawals are currently disabled | No bank withdrawals can be canceled at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |\n</details>\n",
        "operationId": "CancelWithdrawal",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CancelBankOrCryptoWithdrawalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CancelBankWithdrawalResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Cancel bank or crypto withdrawal",
        "tags": [
          "Withdrawals"
        ]
      }
    },
    "/api/v2/withdrawal/open/": {
      "post": {
        "description": "Opens a bank withdrawal request (SEPA or international). Withdrawal requests opened via API are\nautomatically confirmed (no confirmation e-mail will be sent), but are processed just like withdrawals\nopened through the platform's interface. This call can only be performed by your Main Account.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Opening bank withdrawals with sub account API keys is not supported. | This API endpoint can only be utilized by your main account. |\n| 'X': ['This field is required.'] | Parameter X is required for this call. |\n| 'X': ['Select a valid choice. Y is not one of the available choices.'] | Y is not a valid value for parameter X. |\n| Bank withdrawals temporarily disabled. | No new bank withdrawals can be opened at this time. |\n| Unsupported withdrawal type (must be either SEPA or international). | When opening bank withdrawals, you must specify one of the two supported types: SEPA or international. |\n| When opening bank withdrawals, you must specify one of the two supported types: SEPA or international. | To open this withdrawal, your balance must have at least 'amount' of target currency available. |\n| 'X': ['Enter a number. Use \".\" as a decimal point.'] | Parameter X can only be a decimal number. |\n| Your withdrawals are currently disabled | No new withdrawals can be opened at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |\n</details>\n",
        "operationId": "RequestFiatWithdrawal",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OpenBankWithdrawalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OpenBankWithdrawalResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Open bank withdrawal",
        "tags": [
          "Withdrawals"
        ]
      }
    },
    "/api/v2/withdrawal/status/": {
      "post": {
        "description": "Checks the status of a fiat withdrawal request. This call can only be performed by your Main Account.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Performing bank withdrawal status checks with sub account API keys is not supported. | This API endpoint can only be utilized by your main account. |\n| Missing parameters: [...]. | Parameters stated in the list ([...]) are required for this call. |\n| No bank withdrawal with id=X found. | Could not find any bank withdrawal with the id X. |\n</details>\n",
        "operationId": "GetFiatWithdrawalStatus",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BankWithdrawalStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BankWithdrawalStatusResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Fiat withdrawal status",
        "tags": [
          "Withdrawals"
        ]
      }
    },
    "/api/v2/{currency}_address/": {
      "post": {
        "description": "This call will be executed on the account (Sub or Main), to which the used API key is bound to.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| User not verified | Your account needs to be verified before you can use this endpoint. |\n| Your deposits are currently disabled | No new deposits can be made at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |\n| Invalid network selection | The selected network is not supported for 'currency'. Please select a compatible network for it. |\n</details>\n",
        "operationId": "GetCryptoDepositAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DepositAddressResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Crypto deposit address",
        "tags": [
          "Deposits"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "currency",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/{currency}_withdrawal/": {
      "post": {
        "description": "Request a crypto withdrawal.\n\n<details>\n<summary style='cursor: pointer'><strong>Possible errors</strong></summary>\n\n| Reason | Action |\n| ----------- | ----------- |\n| Missing amount and/or address POST parameters | One or both parameters missing. |\n| User not verified | Your account needs to be verified before you can use this endpoint. |\n| 'crypto_currency' withdrawals are currently unavailable for your account | Contact support for additional information. |\n| Not allowed to withdraw to specified 'crypto_currency' address | API key is set for withdrawing to another 'crypto_currency' address. |\n| Enter a number. Use \".\" as a decimal point | Amount parameter can only be number. |\n| You have only 'available' 'crypto_currency' available. Check your account balance for details | Account has less available 'crypto_currency' than are required to make this withdrawal. |\n| Your withdrawals are currently disabled | No new withdrawals can be opened at this time. If a URL is provided you can follow it to resolve any issues which might be causing this. |\n| Ensure this value is greater than or equal to 'minimum_withdrawal_amount' | Minimum withdrawal amount is 'minimum_withdrawal_amount'. |\n| Ensure this value has at least 'minimum_address_length' characters (it has x). Ensure this value has at most 'maximum_address_length' characters (it has x). | Address parameter must be between 'minimum_address_length' and 'maximum_address_length' characters long. |\n| Invalid network selection | The selected network is not supported for 'currency'. Please select a compatible network for it. |\n| Contact does not exist | Review and validate the contact_uuid to ensure it matches an existing contact, you may also create contacts at the /v2/travel_rule/contacts endpoint |\n| Contact is missing required information | Ensure that contact has all the required information in case of retail_info, first_name and last_name are required. |\n| Vasp does not exist | Verify that the vasp_uuid exists within the /v2/travel_rule/vasps endpoint. |\n| contact_uuid: You must set this field because contact_thirdparty=True | contact_uuid must be provided if withdrawing to a third party |\n| The address you provided is not verified | You must verify this address before you can withdraw to it. |\n</details>\n",
        "operationId": "RequestCryptoWithdrawal",
        "requestBody": {
          "content": {
            "www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CryptoWithdrawalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CryptoWithdrawalResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Post operation"
          }
        },
        "security": [],
        "summary": "Crypto withdrawal",
        "tags": [
          "Withdrawals"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "currency",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "servers": [
    {
      "description": "Production server",
      "url": "https://www.bitstamp.net"
    }
  ],
  "tags": [
    {
      "description": "Collection of endpoints that return ticker info.",
      "name": "Tickers",
      "x-displayName": "Tickers"
    },
    {
      "description": "Collection of endpoints that return order book info.",
      "name": "Order book",
      "x-displayName": "Order book"
    },
    {
      "description": "Collection of endpoints that return transaction info.",
      "name": "Transactions public",
      "x-displayName": "Transactions"
    },
    {
      "description": "Collection of Travel Rule related endpoints",
      "name": "Travel rule public",
      "x-displayName": "Travel Rule"
    },
    {
      "description": "Collection of endpoints that return market info.",
      "name": "Market info",
      "x-displayName": "Market info"
    },
    {
      "description": "Collection of endpoints that return account balances.",
      "name": "Account balances",
      "x-displayName": "Account balances"
    },
    {
      "description": "Collection of endpoints that return fee info.",
      "name": "Fees",
      "x-displayName": "Fees"
    },
    {
      "description": "Collection of endpoints for managing orders.",
      "name": "Orders",
      "x-displayName": "Orders"
    },
    {
      "description": "Collection of endpoints for managing withdrawals.",
      "name": "Withdrawals",
      "x-displayName": "Withdrawals"
    },
    {
      "description": "Collection of endpoints for managing deposits.",
      "name": "Deposits",
      "x-displayName": "Deposits"
    },
    {
      "description": "Collection of endpoints for managing Sub Accounts.",
      "name": "Sub account",
      "x-displayName": "Sub account"
    },
    {
      "description": "If you want us to convert your crypto directly to fiat upon deposit, you can use the following endpoints.",
      "name": "Instant convert",
      "x-displayName": "Instant convert"
    },
    {
      "description": "Collection of endpoints for managing Websocket access.",
      "name": "Websocket",
      "x-displayName": "Websocket"
    },
    {
      "description": "Collection of endpoints that return transaction info.",
      "name": "Transactions private",
      "x-displayName": "Transactions"
    },
    {
      "description": "Collection of Travel Rule related endpoints",
      "name": "Travel rule private",
      "x-displayName": "Travel Rule"
    },
    {
      "description": "Collection of endpoints for managing Earn.",
      "name": "Earn",
      "x-displayName": "Earn"
    },
    {
      "description": "Collection of security related endpoints.",
      "name": "Security",
      "x-displayName": "Security"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Public data functions",
      "tags": [
        "Tickers",
        "Order book",
        "Transactions public",
        "Travel rule public",
        "Market info"
      ]
    },
    {
      "name": "Private functions",
      "tags": [
        "Account balances",
        "Fees",
        "Orders",
        "Withdrawals",
        "Deposits",
        "Sub account",
        "Instant convert",
        "Websocket",
        "Transactions private",
        "Travel rule private",
        "Earn",
        "Security"
      ]
    }
  ]
}